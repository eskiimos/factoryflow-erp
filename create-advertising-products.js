const { PrismaClient } = require('@prisma/client');
const { createProductGroups } = require('./create-advertising-product-groups');
const prisma = new PrismaClient();

async function createAdvertisingProducts() {
  console.log('üè≠ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞...');

  // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ –ø–æ–¥–≥—Ä—É–ø–ø—ã
  const { groups, subgroups } = await createProductGroups();
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
  const materials = await prisma.materialItem.findMany({
    where: { isActive: true }
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç
  const workTypes = await prisma.workType.findMany({
    where: { isActive: true }
  });

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ–Ω–¥—ã
  const funds = await prisma.fund.findMany({
    where: { isActive: true }
  });

  console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ: ${materials.length} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, ${workTypes.length} –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç, ${funds.length} —Ñ–æ–Ω–¥–æ–≤`);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
  const findSubgroup = (name) => subgroups.find(sg => sg.name.toLowerCase().includes(name.toLowerCase()));

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
  const findMaterial = (name) => materials.find(m => m.name.toLowerCase().includes(name.toLowerCase()));

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
  const findWorkType = (name) => workTypes.find(w => w.name.toLowerCase().includes(name.toLowerCase()));

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ–Ω–¥–∞ –ø–æ —Ç–∏–ø—É
  const findFund = (type) => funds.find(f => f.fundType === type);

  // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
  const products = [
    // –ù–∞—Ä—É–∂–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ - –í—ã–≤–µ—Å–∫–∏
    {
      name: '–í—ã–≤–µ—Å–∫–∞ –æ–±—ä–µ–º–Ω–∞—è –∏–∑ –ü–í–•',
      description: '–û–±—ä–µ–º–Ω—ã–µ –±—É–∫–≤—ã –∏–∑ –ü–í–• 5–º–º —Å –ª–∏—Ü–µ–≤–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π',
      baseUnit: '—Å–º¬≤',
      basePrice: 12.50,
      sellingPrice: 18.75,
      markup: 1.5,
      minQuantity: 5000,
      productSubgroupId: findSubgroup('–í—ã–≤–µ—Å–∫–∏').id,
      isActive: true,
      materialUsages: {
        create: [
          {
            materialId: findMaterial('–ü–í–• 5–º–º').id,
            quantity: 1.2, // —Å —É—á–µ—Ç–æ–º –æ—Ç—Ö–æ–¥–∞
            isRequired: true
          },
          {
            materialId: findMaterial('LED').id,
            quantity: 0.2,
            isRequired: true
          },
          {
            materialId: findMaterial('–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è').id,
            quantity: 0.02,
            isRequired: true
          }
        ]
      },
      workTypeUsages: {
        create: [
          {
            workTypeId: findWorkType('–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞').id,
            quantity: 1.0,
            isRequired: true
          },
          {
            workTypeId: findWorkType('–°–±–æ—Ä–∫–∞').id,
            quantity: 0.5,
            isRequired: true
          },
          {
            workTypeId: findWorkType('–ú–æ–Ω—Ç–∞–∂').id,
            quantity: 0.3,
            isRequired: true
          }
        ]
      },
      fundUsages: {
        create: [
          {
            fundId: findFund('OVERHEAD').id,
            amount: 1.5
          },
          {
            fundId: findFund('COMMERCIAL').id,
            amount: 0.8
          }
        ]
      }
    },
    {
      name: '–°–≤–µ—Ç–æ–≤–æ–π –∫–æ—Ä–æ–± –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π',
      description: '–õ–∞–π—Ç–±–æ–∫—Å –∏–∑ –∫–æ–º–ø–æ–∑–∏—Ç–∞ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π',
      baseUnit: '–º¬≤',
      basePrice: 3500.00,
      sellingPrice: 5250.00,
      markup: 1.5,
      minQuantity: 1,
      productSubgroupId: findSubgroup('–°–≤–µ—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∞').id,
      isActive: true,
      materialUsages: {
        create: [
          {
            materialId: findMaterial('–ö–æ–º–ø–æ–∑–∏—Ç').id,
            quantity: 1.2,
            isRequired: true
          },
          {
            materialId: findMaterial('LED').id,
            quantity: 4,
            isRequired: true
          },
          {
            materialId: findMaterial('–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è').id,
            quantity: 1,
            isRequired: true
          },
          {
            materialId: findMaterial('–ê–∫—Ä–∏–ª').id,
            quantity: 1,
            isRequired: true
          }
        ]
      },
      workTypeUsages: {
        create: [
          {
            workTypeId: findWorkType('–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞').id,
            quantity: 1.0,
            isRequired: true
          },
          {
            workTypeId: findWorkType('–°–≤–∞—Ä–∫–∞').id,
            quantity: 1.0,
            isRequired: true
          },
          {
            workTypeId: findWorkType('–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂').id,
            quantity: 1.0,
            isRequired: true
          }
        ]
      },
      fundUsages: {
        create: [
          {
            fundId: findFund('OVERHEAD').id,
            amount: 2.5
          },
          {
            fundId: findFund('COMMERCIAL').id,
            amount: 1.2
          }
        ]
      }
    },
    {
      name: '–ë–∞–Ω–Ω–µ—Ä –Ω–∞ –ª—é–≤–µ—Ä—Å–∞—Ö',
      description: '–ë–∞–Ω–Ω–µ—Ä 440–≥/–º¬≤ —Å —É—Å–∏–ª–µ–Ω–∏–µ–º –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É –∏ –ª—é–≤–µ—Ä—Å–∞–º–∏',
      baseUnit: '–º¬≤',
      basePrice: 450.00,
      sellingPrice: 675.00,
      markup: 1.5,
      minQuantity: 2,
      productSubgroupId: findSubgroup('–ë–∞–Ω–Ω–µ—Ä—ã').id,
      isActive: true,
      materialUsages: {
        create: [
          {
            materialId: findMaterial('–ë–∞–Ω–Ω–µ—Ä–Ω–∞—è —Ç–∫–∞–Ω—å 440').id,
            quantity: 1.1,
            isRequired: true
          },
          {
            materialId: findMaterial('–õ—é–≤–µ—Ä—Å—ã').id,
            quantity: 4,
            isRequired: true
          }
        ]
      },
      workTypeUsages: {
        create: [
          {
            workTypeId: findWorkType('–®–∏—Ä–æ–∫–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å').id,
            quantity: 1.0,
            isRequired: true
          },
          {
            workTypeId: findWorkType('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª—é–≤–µ—Ä—Å–æ–≤').id,
            quantity: 1.0,
            isRequired: true
          }
        ]
      },
      fundUsages: {
        create: [
          {
            fundId: findFund('OVERHEAD').id,
            amount: 0.8
          },
          {
            fundId: findFund('COMMERCIAL').id,
            amount: 0.5
          }
        ]
      }
    },

    // –ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è
    {
      name: '–í–∏–∑–∏—Ç–∫–∏ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ',
      description: '–í–∏–∑–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ 90x50–º–º, –±—É–º–∞–≥–∞ 300–≥/–º¬≤',
      baseUnit: '—à—Ç',
      basePrice: 3.50,
      sellingPrice: 5.25,
      markup: 1.5,
      minQuantity: 100,
      productSubgroupId: findSubgroup('–í–∏–∑–∏—Ç–∫–∏').id,
      isActive: true,
      materialUsages: {
        create: [
          {
            materialId: findMaterial('–ë—É–º–∞–≥–∞').id,
            quantity: 0.1,
            isRequired: true
          }
        ]
      },
      workTypeUsages: {
        create: [
          {
            workTypeId: findWorkType('–î–∏–∑–∞–π–Ω –≤–∏–∑–∏—Ç–∫–∏').id,
            quantity: 0.01,
            isRequired: true
          },
          {
            workTypeId: findWorkType('–¶–∏—Ñ—Ä–æ–≤–∞—è –ø–µ—á–∞—Ç—å').id,
            quantity: 1.0,
            isRequired: true
          },
          {
            workTypeId: findWorkType('–†–µ–∑–∫–∞').id,
            quantity: 1.0,
            isRequired: true
          }
        ]
      },
      fundUsages: {
        create: [
          {
            fundId: findFund('OVERHEAD').id,
            amount: 0.3
          },
          {
            fundId: findFund('COMMERCIAL').id,
            amount: 0.2
          }
        ]
      }
    },
    {
      name: '–ü–ª–∞–∫–∞—Ç –ê1',
      description: '–ü–ª–∞–∫–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –ê1, –±—É–º–∞–≥–∞ 150–≥/–º¬≤',
      baseUnit: '—à—Ç',
      basePrice: 180.00,
      sellingPrice: 270.00,
      markup: 1.5,
      minQuantity: 10,
      productSubgroupId: findSubgroup('–ü–ª–∞–∫–∞—Ç—ã').id,
      isActive: true,
      materialUsages: {
        create: [
          {
            materialId: findMaterial('–ë—É–º–∞–≥–∞ –¥–ª—è –ø–ª–æ—Ç—Ç–µ—Ä–∞').id,
            quantity: 1,
            isRequired: true
          }
        ]
      },
      workTypeUsages: {
        create: [
          {
            workTypeId: findWorkType('–î–∏–∑–∞–π–Ω –±–∞–Ω–Ω–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ–π').id,
            quantity: 0.1,
            isRequired: true
          },
          {
            workTypeId: findWorkType('–®–∏—Ä–æ–∫–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å').id,
            quantity: 1.0,
            isRequired: true
          }
        ]
      },
      fundUsages: {
        create: [
          {
            fundId: findFund('OVERHEAD').id,
            amount: 0.5
          },
          {
            fundId: findFund('COMMERCIAL').id,
            amount: 0.3
          }
        ]
      }
    }
  ];

  // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
  const createdProducts = await Promise.all(
    products.map(product => 
      prisma.product.create({
        data: product,
        include: {
          materialUsages: true,
          workTypeUsages: true,
          fundUsages: true
        }
      })
    )
  );

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞`);
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º:');
  createdProducts.forEach(product => {
    console.log(`\nüè∑Ô∏è ${product.name}:`);
    console.log(`   - –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${product.materialUsages.length}`);
    console.log(`   - –í–∏–¥–æ–≤ —Ä–∞–±–æ—Ç: ${product.workTypeUsages.length}`);
    console.log(`   - –§–æ–Ω–¥–æ–≤: ${product.fundUsages.length}`);
    console.log(`   - –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: ${product.basePrice} —Ä—É–±/${product.baseUnit}`);
    console.log(`   - –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${product.sellingPrice} —Ä—É–±/${product.baseUnit}`);
  });

  await prisma.$disconnect();
}

createAdvertisingProducts()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', e);
    process.exit(1);
  });

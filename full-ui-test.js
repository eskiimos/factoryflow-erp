// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç UI flow
const fullUITest = async () => {
  console.log('üß™ Full UI Test - Loading groups and simulating interaction...');
  
  try {
    // 1. –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≥—Ä—É–ø–ø (–∫–∞–∫ –≤ useEffect)
    console.log('üìã Step 1: Loading groups...');
    const groupsResponse = await fetch('http://localhost:3005/api/product-groups');
    const groupsData = await groupsResponse.json();
    const groups = groupsData.data;
    console.log(`‚úÖ Loaded ${groups.length} groups`);
    
    // 2. –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ React
    const expandedGroups = new Set();
    const groupProducts = {};
    const loadingProducts = new Set();
    
    // 3. –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É "–ü–æ–≥–æ–Ω–∞–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è"
    const targetGroup = groups.find(g => g.name === '–ü–æ–≥–æ–Ω–∞–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è');
    if (!targetGroup) {
      console.error('‚ùå Target group not found');
      return;
    }
    
    console.log(`üìÇ Step 2: Found target group: ${targetGroup.name} (ID: ${targetGroup.id})`);
    
    // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫ (toggleGroupExpansion)
    console.log('üîÑ Step 3: Simulating group expansion click...');
    const groupId = targetGroup.id;
    const isSubgroup = false;
    
    console.log('üîÑ Toggle group expansion:', { groupId, isSubgroup });
    
    if (!expandedGroups.has(groupId)) {
      expandedGroups.add(groupId);
      console.log('üì• Expanding group:', groupId);
      
      // 5. –°–∏–º—É–ª–∏—Ä—É–µ–º fetchGroupProducts (—Ç–∞–∫ –∫–∞–∫ —Ç–æ–≤–∞—Ä—ã –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã)
      if (!groupProducts[groupId]) {
        console.log('üõí No products cached, fetching...');
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º setLoadingProducts
        loadingProducts.add(groupId);
        console.log('‚è≥ Loading state added for:', groupId);
        
        const param = isSubgroup ? 'subgroupId' : 'groupId';
        const url = `http://localhost:3005/api/products?${param}=${groupId}&showAll=true`;
        
        console.log('üåê Fetching from:', url);
        const response = await fetch(url);
        
        if (!response.ok) {
          console.error('‚ùå Failed to fetch products');
          return;
        }
        
        const data = await response.json();
        const products = data.data || data.products || [];
        
        console.log(`‚úÖ Loaded ${products.length} products for group ${groupId}`);
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º setGroupProducts
        groupProducts[groupId] = products;
        console.log(`üìä Updated groupProducts state for ${groupId}:`, groupProducts[groupId]?.length, 'products');
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ loading
        loadingProducts.delete(groupId);
        console.log('‚úÖ Loading state removed for:', groupId);
      }
    }
    
    // 6. –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    console.log('\nüéØ Step 4: Checking render conditions...');
    const isExpanded = expandedGroups.has(groupId);
    console.log('üéØ Is expanded:', isExpanded);
    
    if (isExpanded) {
      const isLoading = loadingProducts.has(groupId);
      const hasProducts = groupProducts[groupId] && groupProducts[groupId].length > 0;
      const isEmpty = groupProducts[groupId] && groupProducts[groupId].length === 0;
      
      console.log('üîç Render conditions:');
      console.log('   - isLoading:', isLoading);
      console.log('   - hasProducts:', hasProducts);
      console.log('   - isEmpty:', isEmpty);
      console.log('   - groupProducts[groupId]:', groupProducts[groupId]?.length || 'undefined');
      
      if (isLoading) {
        console.log('‚è≥ Should show: Loading spinner');
      } else if (hasProducts) {
        console.log(`üéâ Should show: ${groupProducts[groupId].length} products`);
        console.log('üì¶ First few products:');
        groupProducts[groupId].slice(0, 3).forEach((product, i) => {
          console.log(`   ${i + 1}. ${product.name} (${product.sku})`);
        });
      } else if (isEmpty) {
        console.log('üì≠ Should show: "–¢–æ–≤–∞—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ—Ç"');
      } else {
        console.log('‚ùì Should show: Nothing (no products loaded yet)');
      }
    } else {
      console.log('üìÅ Group is not expanded, no products should show');
    }
    
    console.log('\n‚úÖ Test completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
};

fullUITest();

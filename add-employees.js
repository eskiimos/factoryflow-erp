const employees = [
  {
    firstName: "–ê–Ω–Ω–∞",
    lastName: "–ö–æ–∑–ª–æ–≤–∞",
    middleName: "–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
    position: "–ì–ª–∞–≤–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä",
    email: "anna.kozlova@factoryflow.com",
    phone: "+79161234567",
    salary: 150000,
    hireDate: "2023-03-15"
  },
  {
    firstName: "–î–º–∏—Ç—Ä–∏–π",
    lastName: "–°–º–∏—Ä–Ω–æ–≤",
    middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
    position: "–¢–µ—Ö–Ω–æ–ª–æ–≥",
    email: "dmitry.smirnov@factoryflow.com",
    phone: "+79162345678",
    salary: 120000,
    hireDate: "2023-05-20"
  },
  {
    firstName: "–ï–ª–µ–Ω–∞",
    lastName: "–í–æ–ª–∫–æ–≤–∞",
    middleName: "–ò–≥–æ—Ä–µ–≤–Ω–∞",
    position: "–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞",
    email: "elena.volkova@factoryflow.com",
    phone: "+79163456789",
    salary: 85000,
    hireDate: "2023-08-10"
  },
  {
    firstName: "–ú–∏—Ö–∞–∏–ª",
    lastName: "–§–µ–¥–æ—Ä–æ–≤",
    middleName: "–°–µ—Ä–≥–µ–µ–≤–∏—á",
    position: "–¢–æ–∫–∞—Ä—å-—É–Ω–∏–≤–µ—Ä—Å–∞–ª",
    email: "mikhail.fedorov@factoryflow.com",
    phone: "+79164567890",
    salary: 95000,
    hireDate: "2022-11-05"
  },
  {
    firstName: "–û–ª—å–≥–∞",
    lastName: "–ù–æ–≤–∏–∫–æ–≤–∞",
    middleName: "–ü–µ—Ç—Ä–æ–≤–Ω–∞",
    position: "–ù–∞—á–∞–ª—å–Ω–∏–∫ —Å–º–µ–Ω—ã",
    email: "olga.novikova@factoryflow.com",
    phone: "+79165678901",
    salary: 110000,
    hireDate: "2022-07-18"
  },
  {
    firstName: "–°–µ—Ä–≥–µ–π",
    lastName: "–ú–æ—Ä–æ–∑–æ–≤",
    middleName: "–í–∏–∫—Ç–æ—Ä–æ–≤–∏—á",
    position: "–°–ª–µ—Å–∞—Ä—å-—Å–±–æ—Ä—â–∏–∫",
    email: "sergey.morozov@factoryflow.com",
    phone: "+79166789012",
    salary: 75000,
    hireDate: "2024-01-22"
  },
  {
    firstName: "–¢–∞—Ç—å—è–Ω–∞",
    lastName: "–õ–µ–±–µ–¥–µ–≤–∞",
    middleName: "–ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞",
    position: "–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞",
    email: "tatyana.lebedeva@factoryflow.com",
    phone: "+79167890123",
    salary: 90000,
    hireDate: "2023-12-03"
  },
  {
    firstName: "–ê–ª–µ–∫—Å–µ–π",
    lastName: "–°–æ–∫–æ–ª–æ–≤",
    middleName: "–ù–∏–∫–æ–ª–∞–µ–≤–∏—á",
    position: "–§—Ä–µ–∑–µ—Ä–æ–≤—â–∏–∫",
    email: "alexey.sokolov@factoryflow.com",
    phone: "+79168901234",
    salary: 88000,
    hireDate: "2024-02-14"
  },
  {
    firstName: "–ú–∞—Ä–∏—è",
    lastName: "–ü–∞–≤–ª–æ–≤–∞",
    middleName: "–î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞",
    position: "–≠–∫–æ–Ω–æ–º–∏—Å—Ç",
    email: "maria.pavlova@factoryflow.com",
    phone: "+79169012345",
    salary: 100000,
    hireDate: "2023-09-07"
  },
  {
    firstName: "–ò–≥–æ—Ä—å",
    lastName: "–í–∞—Å–∏–ª—å–µ–≤",
    middleName: "–ê–Ω–¥—Ä–µ–µ–≤–∏—á",
    position: "–≠–ª–µ–∫—Ç—Ä–∏–∫",
    email: "igor.vasiliev@factoryflow.com",
    phone: "+79160123456",
    salary: 82000,
    hireDate: "2024-06-01"
  }
];

async function addEmployees() {
  console.log('–ù–∞—á–∏–Ω–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...');
  
  for (let i = 0; i < employees.length; i++) {
    const employee = employees[i];
    
    try {
      const response = await fetch('http://localhost:3000/api/employees', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(employee)
      });
      
      const result = await response.json();
      
      if (result.success) {
        console.log(`‚úÖ ${i + 1}. –î–æ–±–∞–≤–ª–µ–Ω: ${employee.lastName} ${employee.firstName} ${employee.middleName || ''} - ${employee.position}`);
      } else {
        console.log(`‚ùå ${i + 1}. –û—à–∏–±–∫–∞: ${employee.lastName} ${employee.firstName} - ${result.message}`);
      }
    } catch (error) {
      console.log(`‚ùå ${i + 1}. –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${employee.lastName} ${employee.firstName} - ${error.message}`);
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log('\nüéâ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
addEmployees();

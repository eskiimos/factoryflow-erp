// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤
const departments = {
  "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ": "cmcs5t5gf0000uge2fd8y5a1c",
  "–°–±–æ—Ä–∫–∞": "cmcs5t5gm0001uge2bnyx5h1g", 
  "–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞": "cmcs5t5go0002uge22bkdqzk2",
  "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": "cmcs5t5gp0003uge2653az2jx",
  "–£–ø–∞–∫–æ–≤–∫–∞": "cmcs5t5gr0004uge2dm5o23yp"
};

// –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –æ—Ç–¥–µ–ª–∞–º
const employeeUpdates = [
  { personnelNumber: "EMP0004", position: "–ì–ª–∞–≤–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä", department: "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ" },
  { personnelNumber: "EMP0005", position: "–¢–µ—Ö–Ω–æ–ª–æ–≥", department: "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ" },
  { personnelNumber: "EMP0006", position: "–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞", department: "–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞" },
  { personnelNumber: "EMP0007", position: "–¢–æ–∫–∞—Ä—å-—É–Ω–∏–≤–µ—Ä—Å–∞–ª", department: "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ" },
  { personnelNumber: "EMP0008", position: "–ù–∞—á–∞–ª—å–Ω–∏–∫ —Å–º–µ–Ω—ã", department: "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ" },
  { personnelNumber: "EMP0009", position: "–°–ª–µ—Å–∞—Ä—å-—Å–±–æ—Ä—â–∏–∫", department: "–°–±–æ—Ä–∫–∞" },
  { personnelNumber: "EMP0010", position: "–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞", department: "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ" },
  { personnelNumber: "EMP0011", position: "–§—Ä–µ–∑–µ—Ä–æ–≤—â–∏–∫", department: "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ" },
  { personnelNumber: "EMP0012", position: "–≠–∫–æ–Ω–æ–º–∏—Å—Ç", department: "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ" },
  { personnelNumber: "EMP0013", position: "–≠–ª–µ–∫—Ç—Ä–∏–∫", department: "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ" },
  { personnelNumber: "EMP0003", position: "–°–ª–µ—Å–∞—Ä—å", department: "–°–±–æ—Ä–∫–∞" }
];

async function updateEmployeeDepartments() {
  console.log('–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...\n');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  const response = await fetch('http://localhost:3000/api/employees');
  const result = await response.json();
  
  if (!result.success) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
    return;
  }
  
  const employees = result.data;
  
  for (let i = 0; i < employeeUpdates.length; i++) {
    const updateInfo = employeeUpdates[i];
    
    // –ù–∞–π–¥–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ —Ç–∞–±–µ–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    const employee = employees.find(emp => emp.personnelNumber === updateInfo.personnelNumber);
    
    if (!employee) {
      console.log(`‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${updateInfo.personnelNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      continue;
    }
    
    const departmentId = departments[updateInfo.department];
    
    if (!departmentId) {
      console.log(`‚ùå –û—Ç–¥–µ–ª "${updateInfo.department}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      continue;
    }
    
    try {
      const updateResponse = await fetch(`http://localhost:3000/api/employees/${employee.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          firstName: employee.firstName,
          lastName: employee.lastName,
          middleName: employee.middleName,
          position: employee.position,
          email: employee.email,
          phone: employee.phone,
          salary: employee.hourlyRate * 160, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ—Å—è—á–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É
          departmentId: departmentId,
          isActive: employee.isActive,
          hireDate: employee.hireDate
        })
      });
      
      const updateResult = await updateResponse.json();
      
      if (updateResult.success) {
        console.log(`‚úÖ ${i + 1}. –û–±–Ω–æ–≤–ª–µ–Ω: ${employee.lastName} ${employee.firstName} ‚Üí ${updateInfo.department}`);
      } else {
        console.log(`‚ùå ${i + 1}. –û—à–∏–±–∫–∞: ${employee.lastName} ${employee.firstName} - ${updateResult.message}`);
      }
    } catch (error) {
      console.log(`‚ùå ${i + 1}. –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${employee.lastName} ${employee.firstName} - ${error.message}`);
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  
  // –ü–æ–∫–∞–∂–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
  console.log('\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º:');
  const finalResponse = await fetch('http://localhost:3000/api/employees');
  const finalResult = await finalResponse.json();
  
  if (finalResult.success) {
    const departmentCounts = {};
    finalResult.data.forEach(emp => {
      const deptName = emp.department ? emp.department.name : '–ë–µ–∑ –æ—Ç–¥–µ–ª–∞';
      departmentCounts[deptName] = (departmentCounts[deptName] || 0) + 1;
    });
    
    Object.entries(departmentCounts).forEach(([dept, count]) => {
      console.log(`   ${dept}: ${count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
    });
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
updateEmployeeDepartments();

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function createWardrobeWithComponents() {
  try {
    console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —à–∫–∞—Ñ–∞ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    const materials = await ensureMaterials()
    console.log(`‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: ${materials.length}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã —Ä–∞–±–æ—Ç
    const workTypes = await ensureWorkTypes()
    console.log(`‚úÖ –¢–∏–ø—ã —Ä–∞–±–æ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: ${workTypes.length}`)

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç "–®–∫–∞—Ñ-–∫—É–ø–µ"
    let product = await prisma.product.findFirst({
      where: { name: '–®–∫–∞—Ñ-–∫—É–ø–µ –º–æ–¥—É–ª—å–Ω—ã–π' }
    })
    
    if (!product) {
      product = await prisma.product.create({
        data: {
          name: '–®–∫–∞—Ñ-–∫—É–ø–µ –º–æ–¥—É–ª—å–Ω—ã–π',
          description: '–ú–æ–¥—É–ª—å–Ω—ã–π —à–∫–∞—Ñ-–∫—É–ø–µ —Å —Ä–∞–∑–¥–≤–∏–∂–Ω—ã–º–∏ –¥–≤–µ—Ä—è–º–∏',
          sku: 'SHKAF-KUPE-001',
          unit: '—à—Ç',
          type: 'FINAL',
          pricingMethod: 'COMPONENT',
          baseUnit: '—à—Ç',
          basePrice: 0, // –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
          currency: 'RUB',
          isActive: true
        }
      })
    }
    console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω: ${product.name} (ID: ${product.id})`)

    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    const components = await createMainComponents(product.id, materials, workTypes)
    console.log(`‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã: ${components.length}`)

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    await createSubComponents(components, materials, workTypes)
    console.log('‚úÖ –ü–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã')

    console.log('üéâ –®–∫–∞—Ñ-–∫—É–ø–µ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
    console.log(`üìã –ü—Ä–æ–¥—É–∫—Ç ID: ${product.id}`)
    console.log('üîó –û—Ç–∫—Ä–æ–π—Ç–µ /calculator/component –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∫–∞—Ñ–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

async function ensureMaterials() {
  const materialsData = [
    {
      name: '–õ–î–°–ü 16–º–º (–æ—Å–Ω–æ–≤–∞)',
      unit: '–º¬≤',
      price: 1200,
      isActive: true
    },
    {
      name: '–õ–î–°–ü 18–º–º (–ø–æ–ª–∫–∏)',
      unit: '–º¬≤',
      price: 1350,
      isActive: true
    },
    {
      name: '–î–í–ü 3–º–º (–∑–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞)',
      unit: '–º¬≤', 
      price: 400,
      isActive: true
    },
    {
      name: '–ó–µ—Ä–∫–∞–ª–æ 4–º–º',
      unit: '–º¬≤',
      price: 2500,
      isActive: true
    },
    {
      name: '–°–∏—Å—Ç–µ–º–∞ –∫—É–ø–µ (–∫–æ–º–ø–ª–µ–∫—Ç)',
      unit: '—à—Ç',
      price: 4500,
      isActive: true
    },
    {
      name: '–ü–æ–ª–∫–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å',
      unit: '—à—Ç',
      price: 45,
      isActive: true
    },
    {
      name: '–®—Ç–∞–Ω–≥–∞ –¥–ª—è –æ–¥–µ–∂–¥—ã',
      unit: '—à—Ç',
      price: 350,
      isActive: true
    },
    {
      name: '–ö—Ä–æ–º–∫–∞ –ü–í–• 0.4–º–º',
      unit: '–ø–æ–≥.–º',
      price: 15,
      isActive: true
    }
  ]

  const materials = []
  for (const materialData of materialsData) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª
    let material = await prisma.materialItem.findFirst({
      where: { name: materialData.name }
    })
    
    if (!material) {
      material = await prisma.materialItem.create({
        data: materialData
      })
    }
    materials.push(material)
  }

  return materials
}

async function ensureWorkTypes() {
  const workTypesData = [
    {
      name: '–†–∞—Å–∫—Ä–æ–π –õ–î–°–ü',
      description: '–†–∞—Å–∫—Ä–æ–π –ª–∏—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–Ω–æ-—Ä–∞—Å–∫—Ä–æ–µ—á–Ω–æ–º —Å—Ç–∞–Ω–∫–µ',
      unit: '—á–∞—Å',
      standardTime: 1.0,
      hourlyRate: 800,
      skillLevel: '–†–∞–±–æ—á–∏–π',
      isActive: true
    },
    {
      name: '–ö—Ä–æ–º–ª–µ–Ω–∏–µ',
      description: '–ü—Ä–∏–∫–ª–µ–∏–≤–∞–Ω–∏–µ –∫—Ä–æ–º–∫–∏ –ü–í–•',
      unit: '—á–∞—Å', 
      standardTime: 1.0,
      hourlyRate: 600,
      skillLevel: '–†–∞–±–æ—á–∏–π',
      isActive: true
    },
    {
      name: '–°–≤–µ—Ä–ª–µ–Ω–∏–µ',
      description: '–°–≤–µ—Ä–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ä—Å—Ç–∏–π',
      unit: '—á–∞—Å',
      standardTime: 1.0,
      hourlyRate: 500,
      skillLevel: '–†–∞–±–æ—á–∏–π',
      isActive: true
    },
    {
      name: '–°–±–æ—Ä–∫–∞ –∫–æ—Ä–ø—É—Å–∞',
      description: '–°–±–æ—Ä–∫–∞ –∫–æ—Ä–ø—É—Å–Ω–æ–π –º–µ–±–µ–ª–∏',
      unit: '—á–∞—Å',
      standardTime: 1.0,
      hourlyRate: 700,
      skillLevel: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
      isActive: true
    },
    {
      name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã',
      description: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏—Ö, –ø–µ—Ç–µ–ª—å, —Ä—É—á–µ–∫',
      unit: '—á–∞—Å',
      standardTime: 1.0,
      hourlyRate: 600,
      skillLevel: '–†–∞–±–æ—á–∏–π',
      isActive: true
    },
    {
      name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–µ—Ä–µ–π-–∫—É–ø–µ',
      description: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–¥–≤–∏–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ –¥–≤–µ—Ä–µ–π',
      unit: '—á–∞—Å',
      standardTime: 1.0,
      hourlyRate: 900,
      skillLevel: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
      isActive: true
    }
  ]

  const workTypes = []
  for (const workTypeData of workTypesData) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã
    let workType = await prisma.workType.findFirst({
      where: { name: workTypeData.name }
    })
    
    if (!workType) {
      workType = await prisma.workType.create({
        data: workTypeData
      })
    }
    workTypes.push(workType)
  }

  return workTypes
}

async function createMainComponents(productId, materials, workTypes) {
  const componentsData = [
    {
      name: '–ö–æ—Ä–ø—É—Å —à–∫–∞—Ñ–∞',
      description: '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–ø—É—Å —à–∫–∞—Ñ–∞-–∫—É–ø–µ –±–µ–∑ –¥–≤–µ—Ä–µ–π',
      componentType: 'MAIN',
      baseQuantity: 1,
      quantityFormula: '1',
      sortOrder: 1,
      isActive: true
    },
    {
      name: '–î–≤–µ—Ä–∏-–∫—É–ø–µ',
      description: '–†–∞–∑–¥–≤–∏–∂–Ω—ã–µ –¥–≤–µ—Ä–∏ —Å –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏',
      componentType: 'MAIN', 
      baseQuantity: 2,
      quantityFormula: 'doorCount',
      sortOrder: 2,
      isActive: true
    },
    {
      name: '–ü–æ–ª–∫–∏ —Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã–µ',
      description: '–†–µ–≥—É–ª–∏—Ä—É–µ–º—ã–µ –ø–æ –≤—ã—Å–æ—Ç–µ –ø–æ–ª–∫–∏',
      componentType: 'OPTIONAL',
      baseQuantity: 3,
      quantityFormula: 'shelfCount',
      sortOrder: 3,
      isActive: true
    },
    {
      name: '–®—Ç–∞–Ω–≥–∞ –¥–ª—è –æ–¥–µ–∂–¥—ã',
      description: '–®—Ç–∞–Ω–≥–∞ –¥–ª—è –≤–µ—à–∞–ª–æ–∫',
      componentType: 'OPTIONAL',
      baseQuantity: 1,
      quantityFormula: '1',
      includeCondition: 'hasHandrail === true',
      sortOrder: 4,
      isActive: true
    }
  ]

  const components = []
  for (const componentData of componentsData) {
    const component = await prisma.productComponent.create({
      data: {
        ...componentData,
        productId
      }
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
    await addMaterialsToComponent(component, materials, workTypes)
    components.push(component)
  }

  return components
}

async function addMaterialsToComponent(component, materials, workTypes) {
  switch (component.name) {
    case '–ö–æ—Ä–ø—É—Å —à–∫–∞—Ñ–∞':
      // –õ–î–°–ü –¥–ª—è –±–æ–∫–æ–≤–∏–Ω, –≤–µ—Ä—Ö–∞, –Ω–∏–∑–∞
      await prisma.componentMaterialUsage.create({
        data: {
          componentId: component.id,
          materialItemId: materials.find(m => m.name === '–õ–î–°–ü 16–º–º (–æ—Å–Ω–æ–≤–∞)').id,
          usageFormula: '((width * height * 2) + (width * depth * 2) + (height * depth * 2)) / 1000000',
          baseUsage: 0,
          wasteFactor: 1.15,
          unit: '–º¬≤'
        }
      })

      // –î–í–ü –¥–ª—è –∑–∞–¥–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
      await prisma.componentMaterialUsage.create({
        data: {
          componentId: component.id,
          materialItemId: materials.find(m => m.name === '–î–í–ü 3–º–º (–∑–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞)').id,
          usageFormula: '(width * height) / 1000000',
          baseUsage: 0,
          wasteFactor: 1.10,
          unit: '–º¬≤'
        }
      })

      // –ö—Ä–æ–º–∫–∞
      await prisma.componentMaterialUsage.create({
        data: {
          componentId: component.id,
          materialItemId: materials.find(m => m.name === '–ö—Ä–æ–º–∫–∞ –ü–í–• 0.4–º–º').id,
          usageFormula: '((width * 4) + (height * 8) + (depth * 4)) / 1000',
          baseUsage: 0,
          wasteFactor: 1.10,
          unit: '–ø–æ–≥.–º'
        }
      })

      // –†–∞–±–æ—Ç—ã
      await prisma.componentWorkTypeUsage.create({
        data: {
          componentId: component.id,
          workTypeId: workTypes.find(w => w.name === '–†–∞—Å–∫—Ä–æ–π –õ–î–°–ü').id,
          timeFormula: '((width + height + depth) / 1000) * 0.5',
          baseTime: 0,
          unit: '—á–∞—Å'
        }
      })

      await prisma.componentWorkTypeUsage.create({
        data: {
          componentId: component.id,
          workTypeId: workTypes.find(w => w.name === '–ö—Ä–æ–º–ª–µ–Ω–∏–µ').id,
          timeFormula: '((width + height + depth) / 1000) * 0.3',
          baseTime: 0,
          unit: '—á–∞—Å'
        }
      })

      await prisma.componentWorkTypeUsage.create({
        data: {
          componentId: component.id,
          workTypeId: workTypes.find(w => w.name === '–°–±–æ—Ä–∫–∞ –∫–æ—Ä–ø—É—Å–∞').id,
          timeFormula: '2',
          baseTime: 2,
          unit: '—á–∞—Å'
        }
      })
      break

    case '–î–≤–µ—Ä–∏-–∫—É–ø–µ':
      // –°–∏—Å—Ç–µ–º–∞ –∫—É–ø–µ
      await prisma.componentMaterialUsage.create({
        data: {
          componentId: component.id,
          materialItemId: materials.find(m => m.name === '–°–∏—Å—Ç–µ–º–∞ –∫—É–ø–µ (–∫–æ–º–ø–ª–µ–∫—Ç)').id,
          usageFormula: '1',
          baseUsage: 1,
          wasteFactor: 1.05,
          unit: '—à—Ç'
        }
      })

      // –ó–µ—Ä–∫–∞–ª–æ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –æ–¥–Ω—É –¥–≤–µ—Ä—å —Å –∑–µ—Ä–∫–∞–ª–æ–º)
      await prisma.componentMaterialUsage.create({
        data: {
          componentId: component.id,
          materialItemId: materials.find(m => m.name === '–ó–µ—Ä–∫–∞–ª–æ 4–º–º').id,
          usageFormula: '((width / doorCount) * height) / 1000000',
          baseUsage: 0,
          wasteFactor: 1.20,
          unit: '–º¬≤'
        }
      })

      // –õ–î–°–ü –¥–ª—è –≤—Ç–æ—Ä–æ–π –¥–≤–µ—Ä–∏
      await prisma.componentMaterialUsage.create({
        data: {
          componentId: component.id,
          materialItemId: materials.find(m => m.name === '–õ–î–°–ü 16–º–º (–æ—Å–Ω–æ–≤–∞)').id,
          usageFormula: '((width / doorCount) * height) / 1000000',
          baseUsage: 0,
          wasteFactor: 1.15,
          unit: '–º¬≤'
        }
      })

      // –†–∞–±–æ—Ç—ã
      await prisma.componentWorkTypeUsage.create({
        data: {
          componentId: component.id,
          workTypeId: workTypes.find(w => w.name === '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–µ—Ä–µ–π-–∫—É–ø–µ').id,
          timeFormula: '1.5',
          baseTime: 1.5,
          unit: '—á–∞—Å'
        }
      })
      break

    case '–ü–æ–ª–∫–∏ —Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã–µ':
      // –õ–î–°–ü –¥–ª—è –ø–æ–ª–æ–∫
      await prisma.componentMaterialUsage.create({
        data: {
          componentId: component.id,
          materialItemId: materials.find(m => m.name === '–õ–î–°–ü 18–º–º (–ø–æ–ª–∫–∏)').id,
          usageFormula: '((width - 32) * (depth - 16)) / 1000000',
          baseUsage: 0,
          wasteFactor: 1.15,
          unit: '–º¬≤'
        }
      })

      // –ü–æ–ª–∫–æ–¥–µ—Ä–∂–∞—Ç–µ–ª–∏
      await prisma.componentMaterialUsage.create({
        data: {
          componentId: component.id,
          materialItemId: materials.find(m => m.name === '–ü–æ–ª–∫–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å').id,
          usageFormula: '4',
          baseUsage: 4,
          wasteFactor: 1.0,
          unit: '—à—Ç'
        }
      })

      // –ö—Ä–æ–º–∫–∞
      await prisma.componentMaterialUsage.create({
        data: {
          componentId: component.id,
          materialItemId: materials.find(m => m.name === '–ö—Ä–æ–º–∫–∞ –ü–í–• 0.4–º–º').id,
          usageFormula: '((width + depth) * 2) / 1000',
          baseUsage: 0,
          wasteFactor: 1.10,
          unit: '–ø–æ–≥.–º'
        }
      })

      // –†–∞–±–æ—Ç—ã
      await prisma.componentWorkTypeUsage.create({
        data: {
          componentId: component.id,
          workTypeId: workTypes.find(w => w.name === '–†–∞—Å–∫—Ä–æ–π –õ–î–°–ü').id,
          timeFormula: '0.2',
          baseTime: 0.2,
          unit: '—á–∞—Å'
        }
      })

      await prisma.componentWorkTypeUsage.create({
        data: {
          componentId: component.id,
          workTypeId: workTypes.find(w => w.name === '–ö—Ä–æ–º–ª–µ–Ω–∏–µ').id,
          timeFormula: '0.15',
          baseTime: 0.15,
          unit: '—á–∞—Å'
        }
      })
      break

    case '–®—Ç–∞–Ω–≥–∞ –¥–ª—è –æ–¥–µ–∂–¥—ã':
      // –®—Ç–∞–Ω–≥–∞
      await prisma.componentMaterialUsage.create({
        data: {
          componentId: component.id,
          materialItemId: materials.find(m => m.name === '–®—Ç–∞–Ω–≥–∞ –¥–ª—è –æ–¥–µ–∂–¥—ã').id,
          usageFormula: '1',
          baseUsage: 1,
          wasteFactor: 1.0,
          unit: '—à—Ç'
        }
      })

      // –†–∞–±–æ—Ç—ã
      await prisma.componentWorkTypeUsage.create({
        data: {
          componentId: component.id,
          workTypeId: workTypes.find(w => w.name === '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã').id,
          timeFormula: '0.3',
          baseTime: 0.3,
          unit: '—á–∞—Å'
        }
      })
      break
  }
}

async function createSubComponents(components, materials, workTypes) {
  // –ü–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞
  console.log('–ü–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —à–∫–∞—Ñ–∞
createWardrobeWithComponents()

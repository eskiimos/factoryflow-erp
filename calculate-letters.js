const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function calculateLettersPrice(width, height) {
  console.log(`üìè –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—ä–µ–º–Ω—ã—Ö –±—É–∫–≤ ${width}√ó${height} –º–º`);
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—ã–π —Ç–æ–≤–∞—Ä (—Ü–µ–Ω–∞ –∑–∞ —Å–º)
    const baseProduct = await prisma.product.findFirst({
      where: { 
        sku: 'BLZ-851-950-LED',
        pricingMethod: 'PER_UNIT',
        baseUnit: '—Å–º'
      }
    });
    
    if (!baseProduct) {
      console.log('‚ùå –ë–∞–∑–æ–≤—ã–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–º–µ—Ç—Ä
    const perimeter = (width + height) * 2 / 10; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–º
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const materialCost = baseProduct.materialCost * perimeter;
    const laborCost = baseProduct.laborCost * perimeter;
    const overheadCost = baseProduct.overheadCost * perimeter;
    const totalCost = baseProduct.totalCost * perimeter;
    const sellingPrice = baseProduct.basePrice * perimeter;
    const productionTime = baseProduct.productionTime * perimeter;
    
    console.log('');
    console.log('üìä –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò:');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`üìê –†–∞–∑–º–µ—Ä: ${width}√ó${height} –º–º`);
    console.log(`üìè –ü–µ—Ä–∏–º–µ—Ç—Ä: ${perimeter} —Å–º`);
    console.log('');
    console.log('üí∞ –°–ï–ë–ï–°–¢–û–ò–ú–û–°–¢–¨:');
    console.log(`   –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${materialCost.toFixed(2)} —Ä—É–± (${baseProduct.materialCost} √ó ${perimeter})`);
    console.log(`   –†–∞–±–æ—Ç—ã: ${laborCost.toFixed(2)} —Ä—É–± (${baseProduct.laborCost} √ó ${perimeter})`);
    console.log(`   –ù–∞–∫–ª–∞–¥–Ω—ã–µ: ${overheadCost.toFixed(2)} —Ä—É–± (${baseProduct.overheadCost} √ó ${perimeter})`);
    console.log(`   –ò–¢–û–ì–û: ${totalCost.toFixed(2)} —Ä—É–±`);
    console.log('');
    console.log('üíµ –ü–†–û–î–ê–ñ–ù–ê–Ø –¶–ï–ù–ê:');
    console.log(`   ${sellingPrice.toFixed(2)} —Ä—É–± (${baseProduct.basePrice} √ó ${perimeter})`);
    console.log('');
    console.log('üìà –ü–†–ò–ë–´–õ–¨:');
    console.log(`   ${(sellingPrice - totalCost).toFixed(2)} —Ä—É–± (${(((sellingPrice - totalCost) / totalCost) * 100).toFixed(1)}%)`);
    console.log('');
    console.log('‚è±Ô∏è –í–†–ï–ú–Ø –ü–†–û–ò–ó–í–û–î–°–¢–í–ê:');
    console.log(`   ${productionTime.toFixed(2)} —á–∞—Å–æ–≤ (${(productionTime / 8).toFixed(1)} —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è)`);
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    return {
      dimensions: `${width}√ó${height}`,
      perimeter,
      costs: {
        materials: materialCost,
        labor: laborCost,
        overhead: overheadCost,
        total: totalCost
      },
      sellingPrice,
      profit: sellingPrice - totalCost,
      profitMargin: ((sellingPrice - totalCost) / totalCost) * 100,
      productionTime
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–æ–≤
async function runExamples() {
  console.log('üéØ –ü–†–ò–ú–ï–†–´ –†–ê–°–ß–ï–¢–û–í –û–ë–™–ï–ú–ù–´–• –ë–£–ö–í\n');
  
  const examples = [
    [500, 300],   // –ú–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã
    [851, 950],   // –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä 
    [1000, 500],  // –°—Ä–µ–¥–Ω–∏–µ –±—É–∫–≤—ã
    [1500, 800],  // –ë–æ–ª—å—à–∏–µ –±—É–∫–≤—ã
    [2000, 1000]  // –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –±—É–∫–≤—ã
  ];
  
  for (const [width, height] of examples) {
    await calculateLettersPrice(width, height);
    console.log('\n');
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.length === 2) {
    // –†–∞—Å—á–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    const width = parseInt(args[0]);
    const height = parseInt(args[1]);
    calculateLettersPrice(width, height).catch(console.error);
  } else {
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã
    runExamples().catch(console.error);
  }
}

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function createAdvertisingProductsFixed() {
  console.log('üè≠ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞...');

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  const productGroups = await prisma.productGroup.findMany({ where: { isActive: true } });
  const productSubgroups = await prisma.productSubgroup.findMany({ where: { isActive: true } });
  const materials = await prisma.materialItem.findMany({ where: { isActive: true } });
  const workTypes = await prisma.workType.findMany({ where: { isActive: true } });
  const funds = await prisma.fund.findMany({ where: { isActive: true } });
  const categories = await prisma.category.findMany({ where: { isActive: true } });

  console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ: ${materials.length} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, ${workTypes.length} –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç, ${funds.length} —Ñ–æ–Ω–¥–æ–≤`);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
  const findSubgroup = (name) => productSubgroups.find(sg => sg.name.toLowerCase().includes(name.toLowerCase()));
  const findMaterial = (name) => materials.find(m => m.name.toLowerCase().includes(name.toLowerCase()));
  const findWorkType = (name) => workTypes.find(w => w.name.toLowerCase().includes(name.toLowerCase()));
  const findFund = (type) => funds.find(f => f.fundType === type);
  const findCategory = (name) => categories.find(c => c.name.toLowerCase().includes(name.toLowerCase()));

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SKU
  const generateSKU = (productName, index) => {
    const words = productName.split(' ');
    const initials = words.slice(0, 3).map(w => w.charAt(0).toUpperCase()).join('');
    return `${initials}${String(index + 1).padStart(3, '0')}`;
  };

  // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏ –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
  const productsData = [
    // –ù–ê–†–£–ñ–ù–ê–Ø –†–ï–ö–õ–ê–ú–ê - –í—ã–≤–µ—Å–∫–∏
    {
      name: '–í—ã–≤–µ—Å–∫–∞ –Ω–∞ –∫–æ–º–ø–æ–∑–∏—Ç–µ 4–º–º',
      description: '–û–±—ä–µ–º–Ω–∞—è –≤—ã–≤–µ—Å–∫–∞ –∏–∑ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ–º –ø–ª–µ–Ω–∫–∏',
      unit: '—Å–º¬≤',
      subgroupName: '–í—ã–≤–µ—Å–∫–∏',
      categoryName: '–ù–∞—Ä—É–∂–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
      materials: [
        { name: '–∫–æ–º–ø–æ–∑–∏—Ç', quantity: 1 }, // 1 —Å–º¬≤
        { name: '–ø–ª–µ–Ω–∫–∞', quantity: 1.1 }, // 1.1 —Å–º¬≤ (—Å –∑–∞–ø–∞—Å–æ–º)
        { name: '–±–æ–ª—Ç', quantity: 0.01 } // –±–æ–ª—Ç—ã –Ω–∞ —Å–º¬≤
      ],
      workTypes: [
        { name: '—Ä–µ–∑–∫–∞', time: 0.02 }, // 0.02 —á–∞—Å–∞ –Ω–∞ —Å–º¬≤
        { name: '–æ–∫–ª–µ–π–∫–∞', time: 0.03 }
      ],
      currentStock: 0,
      minStock: 50000, // –º–∏–Ω–∏–º—É–º 5 –º¬≤
      maxStock: 500000 // –º–∞–∫—Å–∏–º—É–º 50 –º¬≤
    },

    {
      name: '–ë–∞–Ω–Ω–µ—Ä –Ω–∞ –ª—é–≤–µ—Ä—Å–∞—Ö',
      description: '–ë–∞–Ω–Ω–µ—Ä –∏–∑ –ü–í–• —Ç–∫–∞–Ω–∏ —Å —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–µ—á–∞—Ç—å—é –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ª—é–≤–µ—Ä—Å–æ–≤',
      unit: '—Å–º¬≤',
      subgroupName: '–ë–∞–Ω–Ω–µ—Ä—ã –∏ —Ä–∞—Å—Ç—è–∂–∫–∏',
      categoryName: '–ù–∞—Ä—É–∂–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
      materials: [
        { name: '–±–∞–Ω–Ω–µ—Ä', quantity: 1 },
        { name: '–ª—é–≤–µ—Ä—Å', quantity: 0.005 }, // 5 –ª—é–≤–µ—Ä—Å–æ–≤ –Ω–∞ 1000 —Å–º¬≤
        { name: '–∫—Ä–∞—Å–∫–∞', quantity: 0.001 } // —Ä–∞—Å—Ö–æ–¥ –∫—Ä–∞—Å–∫–∏
      ],
      workTypes: [
        { name: '–ø–µ—á–∞—Ç—å', time: 0.001 },
        { name: '–ª—é–≤–µ—Ä—Å—ã', time: 0.002 }
      ],
      currentStock: 0,
      minStock: 100000,
      maxStock: 1000000
    },

    {
      name: '–°–≤–µ—Ç–æ–≤–æ–π –∫–æ—Ä–æ–± –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π',
      description: '–°–≤–µ—Ç–æ–≤–æ–π –∫–æ—Ä–æ–± —Å LED –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –∏ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –ª–∏—Ü–µ–≤–æ–π –ø–∞–Ω–µ–ª—å—é',
      unit: '—Å–º¬≤',
      subgroupName: '–°–≤–µ—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∞',
      categoryName: '–ù–∞—Ä—É–∂–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
      materials: [
        { name: '–ø—Ä–æ—Ñ–∏–ª—å', quantity: 0.4 }, // –ø–µ—Ä–∏–º–µ—Ç—Ä –Ω–∞ —Å–º¬≤
        { name: '–ø–ª–∞—Å—Ç–∏–∫', quantity: 1 },
        { name: '–ª–µ–Ω—Ç–∞', quantity: 0.1 },
        { name: '–ø–ª–µ–Ω–∫–∞', quantity: 1.1 }
      ],
      workTypes: [
        { name: '—Å–±–æ—Ä–∫–∞', time: 0.05 },
        { name: '–æ–∫–ª–µ–π–∫–∞', time: 0.03 },
        { name: '—ç–ª–µ–∫—Ç—Ä–∏–∫–∞', time: 0.02 }
      ],
      currentStock: 0,
      minStock: 10000,
      maxStock: 100000
    },

    // –ò–ù–¢–ï–†–¨–ï–†–ù–ê–Ø –†–ï–ö–õ–ê–ú–ê - –¢–∞–±–ª–∏—á–∫–∏
    {
      name: '–¢–∞–±–ª–∏—á–∫–∞ –∏–∑ –ü–í–• 3–º–º',
      description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—á–∫–∞ –∏–∑ –±–µ–ª–æ–≥–æ –ü–í–• —Å –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ–º –ø–ª–µ–Ω–∫–∏',
      unit: '—Å–º¬≤',
      subgroupName: '–¢–∞–±–ª–∏—á–∫–∏ –∏ –≤—ã–≤–µ—Å–∫–∏',
      categoryName: '–ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
      materials: [
        { name: '–ø–≤—Ö', quantity: 1 },
        { name: '–ø–ª–µ–Ω–∫–∞', quantity: 1.05 }
      ],
      workTypes: [
        { name: '—Ä–µ–∑–∫–∞', time: 0.01 },
        { name: '–æ–∫–ª–µ–π–∫–∞', time: 0.02 }
      ],
      currentStock: 0,
      minStock: 5000,
      maxStock: 50000
    },

    {
      name: '–ë–µ–π–¥–∂ –Ω–∞ –º–∞–≥–Ω–∏—Ç–µ',
      description: '–ò–º–µ–Ω–Ω–æ–π –±–µ–π–¥–∂ –∏–∑ –ø–ª–∞—Å—Ç–∏–∫–∞ —Å –º–∞–≥–Ω–∏—Ç–Ω—ã–º –∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º',
      unit: '—à—Ç',
      subgroupName: '–ë–µ–π–¥–∂–∏',
      categoryName: '–ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
      materials: [
        { name: '–ø–ª–∞—Å—Ç–∏–∫', quantity: 12 }, // 12 —Å–º¬≤ –Ω–∞ –±–µ–π–¥–∂
        { name: '–º–∞–≥–Ω–∏—Ç', quantity: 1 },
        { name: '–ø–ª–µ–Ω–∫–∞', quantity: 13 }
      ],
      workTypes: [
        { name: '—Ä–µ–∑–∫–∞', time: 0.05 },
        { name: '–æ–∫–ª–µ–π–∫–∞', time: 0.1 }
      ],
      currentStock: 0,
      minStock: 100,
      maxStock: 1000
    },

    // –ü–û–õ–ò–ì–†–ê–§–ò–ß–ï–°–ö–ê–Ø –ü–†–û–î–£–ö–¶–ò–Ø
    {
      name: '–í–∏–∑–∏—Ç–∫–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–æ–π –±—É–º–∞–≥–µ',
      description: '–í–∏–∑–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ 90x50–º–º –Ω–∞ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–æ–π –±—É–º–∞–≥–µ 300–≥/–º¬≤',
      unit: '—à—Ç',
      subgroupName: '–í–∏–∑–∏—Ç–∫–∏ –∏ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –∫–∞—Ä—Ç—ã',
      categoryName: '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è',
      materials: [
        { name: '–±—É–º–∞–≥–∞', quantity: 4.5 }, // 4.5 —Å–º¬≤
        { name: '–∫—Ä–∞—Å–∫–∞', quantity: 0.5 }
      ],
      workTypes: [
        { name: '–ø–µ—á–∞—Ç—å', time: 0.002 },
        { name: '—Ä–µ–∑–∫–∞', time: 0.001 }
      ],
      currentStock: 0,
      minStock: 1000,
      maxStock: 10000
    },

    {
      name: '–õ–∏—Å—Ç–æ–≤–∫–∞ –ê4 4+0',
      description: '–õ–∏—Å—Ç–æ–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ê4 —Å –ø–æ–ª–Ω–æ—Ü–≤–µ—Ç–Ω–æ–π –ø–µ—á–∞—Ç—å—é —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã',
      unit: '—à—Ç',
      subgroupName: '–õ–∏—Å—Ç–æ–≤–∫–∏ –∏ —Ñ–ª–∞–µ—Ä—ã',
      categoryName: '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è',
      materials: [
        { name: '–±—É–º–∞–≥–∞', quantity: 623.7 }, // –ø–ª–æ—â–∞–¥—å –ê4 –≤ —Å–º¬≤
        { name: '–∫—Ä–∞—Å–∫–∞', quantity: 5 }
      ],
      workTypes: [
        { name: '–ø–µ—á–∞—Ç—å', time: 0.01 },
        { name: '—Ä–µ–∑–∫–∞', time: 0.002 }
      ],
      currentStock: 0,
      minStock: 500,
      maxStock: 5000
    },

    {
      name: '–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞ —Å–∫–æ–±–µ 16 –ø–æ–ª–æ—Å',
      description: '–ö–∞—Ç–∞–ª–æ–≥ —Ñ–æ—Ä–º–∞—Ç–∞ –ê4, 16 –ø–æ–ª–æ—Å, –ø–µ—á–∞—Ç—å 4+4, –∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–∫–æ–±–æ–π',
      unit: '—à—Ç',
      subgroupName: '–ö–∞—Ç–∞–ª–æ–≥–∏ –∏ –±—Ä–æ—à—é—Ä—ã',
      categoryName: '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è',
      materials: [
        { name: '–±—É–º–∞–≥–∞', quantity: 4989.6 }, // 8 –ª–∏—Å—Ç–æ–≤ –ê4
        { name: '–∫—Ä–∞—Å–∫–∞', quantity: 40 },
        { name: '—Å–∫–æ–±–∞', quantity: 2 }
      ],
      workTypes: [
        { name: '–ø–µ—á–∞—Ç—å', time: 0.1 },
        { name: '—Å–±–æ—Ä–∫–∞', time: 0.05 },
        { name: '—Ä–µ–∑–∫–∞', time: 0.02 }
      ],
      currentStock: 0,
      minStock: 100,
      maxStock: 1000
    },

    // –°–£–í–ï–ù–ò–†–ù–ê–Ø –ü–†–û–î–£–ö–¶–ò–Ø
    {
      name: '–†—É—á–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º',
      description: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è —Ä—É—á–∫–∞ —Å –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ–º –ª–æ–≥–æ—Ç–∏–ø–∞ —Ç–∞–º–ø–æ–ø–µ—á–∞—Ç—å—é',
      unit: '—à—Ç',
      subgroupName: '–†—É—á–∫–∏ –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è',
      categoryName: '–°—É–≤–µ–Ω–∏—Ä–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è',
      materials: [
        { name: '—Ä—É—á–∫–∞', quantity: 1 },
        { name: '–∫—Ä–∞—Å–∫–∞', quantity: 0.1 }
      ],
      workTypes: [
        { name: '—Ç–∞–º–ø–æ–ø–µ—á–∞—Ç—å', time: 0.02 }
      ],
      currentStock: 0,
      minStock: 100,
      maxStock: 5000
    },

    {
      name: '–ö—Ä—É–∂–∫–∞ —Å —Å—É–±–ª–∏–º–∞—Ü–∏–µ–π',
      description: '–ë–µ–ª–∞—è –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –∫—Ä—É–∂–∫–∞ 330–º–ª —Å —Å—É–±–ª–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–µ—á–∞—Ç—å—é',
      unit: '—à—Ç',
      subgroupName: '–ü–æ—Å—É–¥–∞ –∏ –∫—Ä—É–∂–∫–∏',
      categoryName: '–°—É–≤–µ–Ω–∏—Ä–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è',
      materials: [
        { name: '–∫—Ä—É–∂–∫–∞', quantity: 1 },
        { name: '–±—É–º–∞–≥–∞', quantity: 80 }, // –ø–ª–æ—â–∞–¥—å –ø–µ—á–∞—Ç–∏
        { name: '–∫—Ä–∞—Å–∫–∞', quantity: 2 }
      ],
      workTypes: [
        { name: '–ø–µ—á–∞—Ç—å', time: 0.05 },
        { name: '—Å—É–±–ª–∏–º–∞—Ü–∏—è', time: 0.1 }
      ],
      currentStock: 0,
      minStock: 50,
      maxStock: 500
    }
  ];

  // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
  const createdProducts = [];
  
  for (let i = 0; i < productsData.length; i++) {
    const productData = productsData[i];
    
    try {
      console.log(`\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${productData.name}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–≥—Ä—É–ø–ø—É
      const subgroup = findSubgroup(productData.subgroupName);
      
      if (!subgroup) {
        console.log(`‚ùå –ü–æ–¥–≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è: ${productData.subgroupName}`);
        continue;
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
      let materialsCost = 0;
      const validMaterials = [];
      
      for (const matUsage of productData.materials) {
        const material = findMaterial(matUsage.name);
        if (material) {
          materialsCost += material.price * matUsage.quantity;
          validMaterials.push({ material, quantity: matUsage.quantity });
        } else {
          console.log(`‚ö†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${matUsage.name}`);
        }
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç
      let laborCost = 0;
      let totalTime = 0;
      const validWorkTypes = [];
      
      for (const workUsage of productData.workTypes) {
        const workType = findWorkType(workUsage.name);
        if (workType) {
          const cost = workType.hourlyRate * workUsage.time;
          laborCost += cost;
          totalTime += workUsage.time;
          validWorkTypes.push({ workType, time: workUsage.time });
        } else {
          console.log(`‚ö†Ô∏è –í–∏–¥ —Ä–∞–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${workUsage.name}`);
        }
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (10% –æ—Ç –ø—Ä—è–º—ã—Ö –∑–∞—Ç—Ä–∞—Ç)
      const overheadCost = (materialsCost + laborCost) * 0.1;
      const totalCost = materialsCost + laborCost + overheadCost;
      
      // –¶–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 25%
      const sellingPrice = totalCost * 1.25;

      console.log(`üí∞ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${materialsCost.toFixed(2)}‚ÇΩ, –†–∞–±–æ—Ç—ã: ${laborCost.toFixed(2)}‚ÇΩ, –ù–∞–∫–ª–∞–¥–Ω—ã–µ: ${overheadCost.toFixed(2)}‚ÇΩ`);
      console.log(`üí∞ –ò—Ç–æ–≥–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalCost.toFixed(2)}‚ÇΩ, –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${sellingPrice.toFixed(2)}‚ÇΩ`);

      // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
      const product = await prisma.product.create({
        data: {
          name: productData.name,
          description: productData.description,
          sku: generateSKU(productData.name, i),
          unit: productData.unit,
          sellingPrice: Number(sellingPrice.toFixed(2)),
          subgroupId: subgroup.id,
          currentStock: productData.currentStock,
          minStock: productData.minStock,
          maxStock: productData.maxStock,
          isActive: true
        }
      });

      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
      for (const { material, quantity } of validMaterials) {
        await prisma.productMaterialUsage.create({
          data: {
            productId: product.id,
            materialItemId: material.id,
            quantity: Number(quantity.toFixed(4)),
            cost: Number((material.price * quantity).toFixed(2))
          }
        });
      }

      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Å –≤–∏–¥–∞–º–∏ —Ä–∞–±–æ—Ç
      for (const { workType, time } of validWorkTypes) {
        await prisma.productWorkTypeUsage.create({
          data: {
            productId: product.id,
            workTypeId: workType.id,
            quantity: Number(time.toFixed(4)),
            cost: Number((workType.hourlyRate * time).toFixed(2))
          }
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–¥–æ–≤ (–æ–±—â–∏–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã)
      const funds = await prisma.fund.findMany({ where: { isActive: true }, take: 1 });
      if (funds.length > 0) {
        await prisma.productFundUsage.create({
          data: {
            productId: product.id,
            fundId: funds[0].id,
            allocationPercentage: 10.0
          }
        });
      }

      createdProducts.push(product);
      console.log(`‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω: ${product.name} (${product.sku})`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${productData.name}:`, error.message);
    }
  }

  console.log(`\nüéâ –°–æ–∑–¥–∞–Ω–æ ${createdProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
  
  await prisma.$disconnect();
  return createdProducts;
}

if (require.main === module) {
  createAdvertisingProductsFixed()
    .catch((e) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', e);
      process.exit(1);
    });
}

module.exports = { createAdvertisingProducts: createAdvertisingProductsFixed };

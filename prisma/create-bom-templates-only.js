const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function createBomTemplatesOnly() {
  console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ BOM-—à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã
    const existingResources = await prisma.resource.findMany({
      select: { id: true, code: true, name: true, type: true }
    })

    const resourceMap = {}
    existingResources.forEach(r => {
      resourceMap[r.code] = r
    })

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${existingResources.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤`)

    // 1. –°–æ–∑–¥–∞–µ–º BOM-—à–∞–±–ª–æ–Ω –¥–ª—è –ª–µ—Å—Ç–Ω–∏—Ü—ã
    const ladderTemplate = await prisma.template.findUnique({
      where: { id: 'cmdegjp1e0000ugzj4dk1nb4x' }
    })

    if (!ladderTemplate) {
      console.log('‚ùå –®–∞–±–ª–æ–Ω –ª–µ—Å—Ç–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ BOM-—à–∞–±–ª–æ–Ω –¥–ª—è –ª–µ—Å—Ç–Ω–∏—Ü—ã
    const existingLadderBom = await prisma.bomTemplate.findUnique({
      where: { templateId: ladderTemplate.id }
    })

    if (!existingLadderBom) {
      const ladderBom = await prisma.bomTemplate.create({
        data: {
          templateId: ladderTemplate.id,
          includeWaste: true,
          includeSetup: true,
          roundQuantities: true
        }
      })

      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã BOM –¥–ª—è –ª–µ—Å—Ç–Ω–∏—Ü—ã
      const ladderBomItems = [
        {
          resourceCode: 'WOOD_BOARD',
          quantityFormula: 'wood_volume * 0.85',
          quantityUnit: '–º¬≥',
          groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
          sortOrder: 10
        },
        {
          resourceCode: 'STEP_WOOD',
          quantityFormula: 'calculated_steps',
          quantityUnit: '—à—Ç',
          groupName: '–°—Ç—É–ø–µ–Ω–∏',
          sortOrder: 20
        },
        {
          resourceCode: 'HANDRAIL_WOOD',
          quantityFormula: 'handrail_length',
          quantityUnit: '–º',
          groupName: '–ü–æ—Ä—É—á–Ω–∏',
          sortOrder: 30,
          includeCondition: 'HAS_HANDRAIL'
        },
        {
          resourceCode: 'MOUNTING_BOLTS',
          quantityFormula: 'calculated_steps * 4',
          quantityUnit: '—à—Ç',
          groupName: '–ö—Ä–µ–ø–µ–∂',
          sortOrder: 40
        },
        {
          resourceCode: 'CUTTING_WORK',
          quantityFormula: 'wood_volume * 2',
          quantityUnit: '—á–∞—Å',
          groupName: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
          sortOrder: 50
        },
        {
          resourceCode: 'ASSEMBLY_WORK',
          quantityFormula: 'assembly_time',
          quantityUnit: '—á–∞—Å',
          groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
          sortOrder: 60
        }
      ]

      for (const item of ladderBomItems) {
        const resource = resourceMap[item.resourceCode]
        if (resource) {
          await prisma.bomTemplateItem.create({
            data: {
              bomTemplateId: ladderBom.id,
              resourceId: resource.id,
              quantityFormula: item.quantityFormula,
              quantityUnit: item.quantityUnit,
              groupName: item.groupName,
              sortOrder: item.sortOrder,
              includeCondition: item.includeCondition || null
            }
          })
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç BOM: ${resource.name}`)
        } else {
          console.log(`‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${item.resourceCode}`)
        }
      }

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω BOM-—à–∞–±–ª–æ–Ω –¥–ª—è –ª–µ—Å—Ç–Ω–∏—Ü—ã: ${ladderBom.id}`)
    } else {
      console.log('‚ôªÔ∏è BOM-—à–∞–±–ª–æ–Ω –¥–ª—è –ª–µ—Å—Ç–Ω–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    }

    // 2. –°–æ–∑–¥–∞–µ–º BOM-—à–∞–±–ª–æ–Ω –¥–ª—è –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    const metalTemplate = await prisma.template.findUnique({
      where: { id: 'cmdeiabtc000duglt21fu8qmx' }
    })

    if (metalTemplate) {
      const existingMetalBom = await prisma.bomTemplate.findUnique({
        where: { templateId: metalTemplate.id }
      })

      if (!existingMetalBom) {
        const metalBom = await prisma.bomTemplate.create({
          data: {
            templateId: metalTemplate.id,
            includeWaste: true,
            includeSetup: true,
            roundQuantities: true
          }
        })

        const metalBomItems = [
          {
            resourceCode: 'STEEL_ANGLE', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Å—É—Ä—Å
            quantityFormula: 'METAL_WEIGHT',
            quantityUnit: '–∫–≥',
            groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
            sortOrder: 10
          },
          {
            resourceCode: 'WELDING_WORK',
            quantityFormula: 'WELDING_LENGTH * 0.5',
            quantityUnit: '—á–∞—Å',
            groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
            sortOrder: 40
          }
        ]

        for (const item of metalBomItems) {
          const resource = resourceMap[item.resourceCode]
          if (resource) {
            await prisma.bomTemplateItem.create({
              data: {
                bomTemplateId: metalBom.id,
                resourceId: resource.id,
                quantityFormula: item.quantityFormula,
                quantityUnit: item.quantityUnit,
                groupName: item.groupName,
                sortOrder: item.sortOrder
              }
            })
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç BOM: ${resource.name}`)
          }
        }

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω BOM-—à–∞–±–ª–æ–Ω –¥–ª—è –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: ${metalBom.id}`)
      } else {
        console.log('‚ôªÔ∏è BOM-—à–∞–±–ª–æ–Ω –¥–ª—è –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }
    }

    // 3. –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—è
    const textileResources = [
      {
        code: 'MAIN_FABRIC',
        name: '–¢–∫–∞–Ω—å –æ—Å–Ω–æ–≤–Ω–∞—è',
        type: 'MATERIAL',
        baseUnit: '–º¬≤',
        costPrice: 150,
        sellingPrice: 200,
        category: '–¢–∫–∞–Ω–∏'
      },
      {
        code: 'THREADS',
        name: '–ù–∏—Ç–∫–∏ —à–≤–µ–π–Ω—ã–µ',
        type: 'MATERIAL',
        baseUnit: '–º',
        costPrice: 0.3,
        sellingPrice: 0.5,
        category: '–§—É—Ä–Ω–∏—Ç—É—Ä–∞'
      },
      {
        code: 'SEWING_WORK_TEXTILE',
        name: '–ü–æ—à–∏–≤ —Ç–µ–∫—Å—Ç–∏–ª—å–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π',
        type: 'LABOR',
        baseUnit: '—á–∞—Å',
        costPrice: 250,
        sellingPrice: 350,
        category: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
      }
    ]

    // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—è
    for (const resourceData of textileResources) {
      if (!resourceMap[resourceData.code]) {
        const newResource = await prisma.resource.create({
          data: resourceData
        })
        resourceMap[resourceData.code] = newResource
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å: ${newResource.name}`)
      }
    }

    // 4. –°–æ–∑–¥–∞–µ–º BOM-—à–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—è
    const textileTemplate = await prisma.template.findUnique({
      where: { id: 'cmdeibcpp000dugp4pjkvg82k' }
    })

    if (textileTemplate) {
      const existingTextileBom = await prisma.bomTemplate.findUnique({
        where: { templateId: textileTemplate.id }
      })

      if (!existingTextileBom) {
        const textileBom = await prisma.bomTemplate.create({
          data: {
            templateId: textileTemplate.id,
            includeWaste: true,
            includeSetup: true,
            roundQuantities: true
          }
        })

        const textileBomItems = [
          {
            resourceCode: 'MAIN_FABRIC',
            quantityFormula: 'FABRIC_CONSUMPTION',
            quantityUnit: '–º¬≤',
            groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
            sortOrder: 10
          },
          {
            resourceCode: 'THREADS',
            quantityFormula: 'FABRIC_CONSUMPTION * 100',
            quantityUnit: '–º',
            groupName: '–§—É—Ä–Ω–∏—Ç—É—Ä–∞',
            sortOrder: 20
          },
          {
            resourceCode: 'SEWING_WORK_TEXTILE',
            quantityFormula: 'sewing_time_calc',
            quantityUnit: '—á–∞—Å',
            groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
            sortOrder: 30
          }
        ]

        for (const item of textileBomItems) {
          const resource = resourceMap[item.resourceCode]
          if (resource) {
            await prisma.bomTemplateItem.create({
              data: {
                bomTemplateId: textileBom.id,
                resourceId: resource.id,
                quantityFormula: item.quantityFormula,
                quantityUnit: item.quantityUnit,
                groupName: item.groupName,
                sortOrder: item.sortOrder
              }
            })
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç BOM: ${resource.name}`)
          }
        }

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω BOM-—à–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—è: ${textileBom.id}`)
      } else {
        console.log('‚ôªÔ∏è BOM-—à–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }
    }

    console.log(`\nüéâ BOM-—à–∞–±–ª–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ BOM-—à–∞–±–ª–æ–Ω–æ–≤:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createBomTemplatesOnly()

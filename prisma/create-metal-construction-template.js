const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function createMetalConstructionTemplate() {
  console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ "–ú–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"...')

  try {
    // 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    const metalParams = [
      {
        code: 'CONSTRUCTION_TYPE',
        name: '–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
        type: 'SELECT',
        selectOptions: JSON.stringify([
          { value: 'beam', label: '–ë–∞–ª–∫–∞' },
          { value: 'frame', label: '–†–∞–º–∞' },
          { value: 'truss', label: '–§–µ—Ä–º–∞' },
          { value: 'column', label: '–ö–æ–ª–æ–Ω–Ω–∞' },
          { value: 'stairs', label: '–õ–µ—Å—Ç–Ω–∏—Ü–∞ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è' }
        ])
      },
      {
        code: 'STEEL_GRADE',
        name: '–ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏',
        type: 'SELECT',
        selectOptions: JSON.stringify([
          { value: 'st3', label: '–°—Ç3' },
          { value: '09g2s', label: '09–ì2–°' },
          { value: 'st20', label: '–°—Ç20' },
          { value: '40x', label: '40–•' }
        ])
      },
      {
        code: 'METAL_WEIGHT',
        name: '–í–µ—Å –º–µ—Ç–∞–ª–ª–∞',
        type: 'NUMBER',
        unit: '–∫–≥',
        minValue: 1,
        maxValue: 50000
      },
      {
        code: 'WELDING_LENGTH',
        name: '–î–ª–∏–Ω–∞ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤',
        type: 'LENGTH',
        unit: '–º',
        minValue: 0,
        maxValue: 1000
      },
      {
        code: 'SURFACE_TREATMENT',
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏',
        type: 'SELECT',
        selectOptions: JSON.stringify([
          { value: 'none', label: '–ë–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏' },
          { value: 'primer', label: '–ì—Ä—É–Ω—Ç–æ–≤–∫–∞' },
          { value: 'paint', label: '–ü–æ–∫—Ä–∞—Å–∫–∞' },
          { value: 'galvanizing', label: '–¶–∏–Ω–∫–æ–≤–∞–Ω–∏–µ' }
        ])
      },
      {
        code: 'MACHINING_REQUIRED',
        name: '–¢—Ä–µ–±—É–µ—Ç—Å—è –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞',
        type: 'BOOLEAN'
      },
      {
        code: 'PIECES_COUNT',
        name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π',
        type: 'NUMBER',
        unit: '—à—Ç',
        minValue: 1,
        maxValue: 10000
      }
    ]

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const createdParams = []
    for (const param of metalParams) {
      const existingParam = await prisma.parameter.findUnique({
        where: { code: param.code }
      })

      if (!existingParam) {
        const newParam = await prisma.parameter.create({
          data: param
        })
        createdParams.push(newParam)
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: ${param.code}`)
      } else {
        createdParams.push(existingParam)
        console.log(`‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: ${param.code}`)
      }
    }

    // 2. –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    const metalFormulas = [
      {
        code: 'STEEL_COST_CALC',
        name: '–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∞–ª–∏',
        expression: 'METAL_WEIGHT * (STEEL_GRADE === "st3" ? 45 : STEEL_GRADE === "09g2s" ? 52 : STEEL_GRADE === "st20" ? 48 : STEEL_GRADE === "40x" ? 65 : 50)',
        inputParameters: JSON.stringify(['METAL_WEIGHT', 'STEEL_GRADE']),
        outputType: 'NUMBER',
        outputUnit: '‚ÇΩ'
      },
      {
        code: 'WELDING_COST_CALC',
        name: '–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–≤–∞—Ä–æ—á–Ω—ã—Ö —Ä–∞–±–æ—Ç',
        expression: 'WELDING_LENGTH * (CONSTRUCTION_TYPE === "truss" ? 800 : CONSTRUCTION_TYPE === "frame" ? 600 : 500)',
        inputParameters: JSON.stringify(['WELDING_LENGTH', 'CONSTRUCTION_TYPE']),
        outputType: 'NUMBER',
        outputUnit: '‚ÇΩ'
      },
      {
        code: 'MACHINING_COST_CALC',
        name: '–°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        expression: 'MACHINING_REQUIRED ? METAL_WEIGHT * 15 : 0',
        inputParameters: JSON.stringify(['MACHINING_REQUIRED', 'METAL_WEIGHT']),
        outputType: 'NUMBER',
        outputUnit: '‚ÇΩ'
      },
      {
        code: 'SURFACE_TREATMENT_COST',
        name: '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏',
        expression: 'METAL_WEIGHT * (SURFACE_TREATMENT === "none" ? 0 : SURFACE_TREATMENT === "primer" ? 8 : SURFACE_TREATMENT === "paint" ? 12 : SURFACE_TREATMENT === "galvanizing" ? 25 : 0)',
        inputParameters: JSON.stringify(['METAL_WEIGHT', 'SURFACE_TREATMENT']),
        outputType: 'NUMBER',
        outputUnit: '‚ÇΩ'
      },
      {
        code: 'METAL_PRODUCTION_TIME',
        name: '–í—Ä–µ–º—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è',
        expression: '(WELDING_LENGTH * 0.5 + METAL_WEIGHT * 0.02 + (MACHINING_REQUIRED ? METAL_WEIGHT * 0.03 : 0))',
        inputParameters: JSON.stringify(['WELDING_LENGTH', 'METAL_WEIGHT', 'MACHINING_REQUIRED']),
        outputType: 'NUMBER',
        outputUnit: '—á–∞—Å'
      },
      {
        code: 'SERIES_DISCOUNT',
        name: '–°–∫–∏–¥–∫–∞ –∑–∞ —Å–µ—Ä–∏–π–Ω–æ—Å—Ç—å',
        expression: 'PIECES_COUNT >= 100 ? 25 : PIECES_COUNT >= 50 ? 20 : PIECES_COUNT >= 20 ? 15 : PIECES_COUNT >= 10 ? 10 : 0',
        inputParameters: JSON.stringify(['PIECES_COUNT']),
        outputType: 'NUMBER',
        outputUnit: '%'
      }
    ]

    const createdFormulas = []
    for (const formula of metalFormulas) {
      const existingFormula = await prisma.formula.findUnique({
        where: { code: formula.code }
      })

      if (!existingFormula) {
        const newFormula = await prisma.formula.create({
          data: formula
        })
        createdFormulas.push(newFormula)
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞: ${formula.code}`)
      } else {
        createdFormulas.push(existingFormula)
        console.log(`‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ–æ—Ä–º—É–ª–∞: ${formula.code}`)
      }
    }

    // 3. –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω "–ú–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
    const metalTemplate = await prisma.template.create({
      data: {
        code: 'METAL_CONSTRUCTION',
        name: '–ú–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
        description: '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π',
        category: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
        subcategory: '–ú–µ—Ç–∞–ª–ª–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞',
        basePrice: 25000,
        marginPercent: 35,
        stepByStep: true,
        previewEnabled: true,
        version: '1.0'
      }
    })

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω: ${metalTemplate.name} (ID: ${metalTemplate.id})`)

    // 4. –°–≤—è–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —à–∞–±–ª–æ–Ω–æ–º
    for (let i = 0; i < createdParams.length; i++) {
      const param = createdParams[i]
      const isRequired = ['CONSTRUCTION_TYPE', 'STEEL_GRADE', 'METAL_WEIGHT', 'PIECES_COUNT'].includes(param.code)

      await prisma.templateParameter.create({
        data: {
          templateId: metalTemplate.id,
          parameterId: param.id,
          isRequired,
          sortOrder: (i + 1) * 10
        }
      })
      console.log(`‚úÖ –°–≤—è–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä ${param.code} —Å —à–∞–±–ª–æ–Ω–æ–º`)
    }

    // 5. –°–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã —Å —à–∞–±–ª–æ–Ω–æ–º
    for (let i = 0; i < createdFormulas.length; i++) {
      const formula = createdFormulas[i]
      const templateFormula = await prisma.templateFormula.create({
        data: {
          templateId: metalTemplate.id,
          formulaId: formula.id,
          executionOrder: (i + 1) * 10,
          outputVariable: formula.code.toLowerCase(),
          outputLabel: formula.name
        }
      })
      console.log(`‚úÖ –°–≤—è–∑–∞–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ ${formula.code} —Å —à–∞–±–ª–æ–Ω–æ–º`)
    }

    console.log(`\nüéâ –®–∞–±–ª–æ–Ω "–ú–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`)
    console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${createdParams.length}`)
    console.log(`üßÆ –§–æ—Ä–º—É–ª: ${createdFormulas.length}`)
    console.log(`üÜî ID —à–∞–±–ª–æ–Ω–∞: ${metalTemplate.id}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createMetalConstructionTemplate()

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function createResourcesAndBomTemplates() {
  console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ BOM-—à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤...')

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–π –ª–µ—Å—Ç–Ω–∏—Ü—ã
    const ladderResources = []
    
    // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ª–µ—Å—Ç–Ω–∏—Ü—ã
    const woodBoard = await prisma.resource.create({
      data: {
        code: 'WOOD_BOARD',
        name: '–î–æ—Å–∫–∞ –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è',
        type: 'MATERIAL',
        baseUnit: '–º¬≥',
        costPrice: 18000,
        sellingPrice: 20000,
        category: '–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã'
      }
    })
    ladderResources.push(woodBoard)

    const stepWood = await prisma.resource.create({
      data: {
        code: 'STEP_WOOD',
        name: '–°—Ç—É–ø–µ–Ω–∏ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ',
        type: 'MATERIAL',
        baseUnit: '—à—Ç',
        costPrice: 800,
        sellingPrice: 1000,
        category: '–°—Ç—É–ø–µ–Ω–∏'
      }
    })
    ladderResources.push(stepWood)

    const handrailWood = await prisma.resource.create({
      data: {
        code: 'HANDRAIL_WOOD',
        name: '–ü–æ—Ä—É—á–µ–Ω—å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π',
        type: 'MATERIAL',
        baseUnit: '–º',
        costPrice: 600,
        sellingPrice: 800,
        category: '–ü–æ—Ä—É—á–Ω–∏'
      }
    })
    ladderResources.push(handrailWood)

    const mountingBolts = await prisma.resource.create({
      data: {
        code: 'MOUNTING_BOLTS',
        name: '–ë–æ–ª—Ç—ã –∫—Ä–µ–ø–µ–∂–Ω—ã–µ –ú8x120',
        type: 'MATERIAL',
        baseUnit: '—à—Ç',
        costPrice: 20,
        sellingPrice: 25,
        category: '–ö—Ä–µ–ø–µ–∂'
      }
    })
    ladderResources.push(mountingBolts)

    // –†–∞–±–æ—Ç—ã –¥–ª—è –ª–µ—Å—Ç–Ω–∏—Ü—ã
    const cuttingWork = await prisma.resource.create({
      data: {
        code: 'CUTTING_WORK',
        name: '–†–∞—Å–ø–∏–ª–æ–≤–∫–∞ –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
        type: 'LABOR',
        baseUnit: '—á–∞—Å',
        costPrice: 600,
        sellingPrice: 800,
        category: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
      }
    })
    ladderResources.push(cuttingWork)

    const assemblyWork = await prisma.resource.create({
      data: {
        code: 'ASSEMBLY_WORK',
        name: '–°–±–æ—Ä–∫–∞ –ª–µ—Å—Ç–Ω–∏—Ü—ã',
        type: 'LABOR',
        baseUnit: '—á–∞—Å',
        costPrice: 900,
        sellingPrice: 1200,
        category: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
      }
    })
    ladderResources.push(assemblyWork)

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${ladderResources.length} —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ª–µ—Å—Ç–Ω–∏—Ü—ã`)

    // 2. –°–æ–∑–¥–∞–µ–º BOM-—à–∞–±–ª–æ–Ω –¥–ª—è –ª–µ—Å—Ç–Ω–∏—Ü—ã
    const ladderBom = await prisma.bomTemplate.create({
      data: {
        templateId: 'cmdegjp1e0000ugzj4dk1nb4x', // ID —à–∞–±–ª–æ–Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü—ã
        includeWaste: true,
        includeSetup: true,
        roundQuantities: true
      }
    })

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã BOM –¥–ª—è –ª–µ—Å—Ç–Ω–∏—Ü—ã
    const ladderBomItems = [
      {
        resourceId: woodBoard.id,
        quantityFormula: 'wood_volume * 0.85',
        quantityUnit: '–º¬≥',
        groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        sortOrder: 10
      },
      {
        resourceId: stepWood.id,
        quantityFormula: 'calculated_steps',
        quantityUnit: '—à—Ç',
        groupName: '–°—Ç—É–ø–µ–Ω–∏',
        sortOrder: 20
      },
      {
        resourceId: handrailWood.id,
        quantityFormula: 'handrail_length',
        quantityUnit: '–º',
        groupName: '–ü–æ—Ä—É—á–Ω–∏',
        sortOrder: 30,
        includeCondition: 'HAS_HANDRAIL'
      },
      {
        resourceId: mountingBolts.id,
        quantityFormula: 'calculated_steps * 4',
        quantityUnit: '—à—Ç',
        groupName: '–ö—Ä–µ–ø–µ–∂',
        sortOrder: 40
      },
      {
        resourceId: cuttingWork.id,
        quantityFormula: 'wood_volume * 2',
        quantityUnit: '—á–∞—Å',
        groupName: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
        sortOrder: 50
      },
      {
        resourceId: assemblyWork.id,
        quantityFormula: 'assembly_time',
        quantityUnit: '—á–∞—Å',
        groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
        sortOrder: 60
      }
    ]

    for (const item of ladderBomItems) {
      await prisma.bomTemplateItem.create({
        data: {
          bomTemplateId: ladderBom.id,
          ...item
        }
      })
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω BOM-—à–∞–±–ª–æ–Ω –¥–ª—è –ª–µ—Å—Ç–Ω–∏—Ü—ã —Å ${ladderBomItems.length} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏`)

    // 3. –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    const metalResources = []

    const steelProfile = await prisma.resource.create({
      data: {
        code: 'STEEL_PROFILE',
        name: '–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞–ª—å–Ω–æ–π',
        type: 'MATERIAL',
        baseUnit: '–∫–≥',
        costPrice: 40,
        sellingPrice: 50,
        category: '–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç'
      }
    })
    metalResources.push(steelProfile)

    const weldingElectrodes = await prisma.resource.create({
      data: {
        code: 'WELDING_ELECTRODES',
        name: '–≠–ª–µ–∫—Ç—Ä–æ–¥—ã —Å–≤–∞—Ä–æ—á–Ω—ã–µ',
        type: 'MATERIAL',
        baseUnit: '–∫–≥',
        costPrice: 100,
        sellingPrice: 120,
        category: '–°–≤–∞—Ä–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
      }
    })
    metalResources.push(weldingElectrodes)

    const metalCutting = await prisma.resource.create({
      data: {
        code: 'CUTTING_METAL',
        name: '–†–µ–∑–∫–∞ –º–µ—Ç–∞–ª–ª–∞',
        type: 'LABOR',
        baseUnit: '—á–∞—Å',
        costPrice: 600,
        sellingPrice: 800,
        category: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
      }
    })
    metalResources.push(metalCutting)

    const weldingWork = await prisma.resource.create({
      data: {
        code: 'WELDING_WORK',
        name: '–°–≤–∞—Ä–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
        type: 'LABOR',
        baseUnit: '—á–∞—Å',
        costPrice: 900,
        sellingPrice: 1200,
        category: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
      }
    })
    metalResources.push(weldingWork)

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${metalResources.length} —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π`)

    // 4. –°–æ–∑–¥–∞–µ–º BOM-—à–∞–±–ª–æ–Ω –¥–ª—è –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    const metalBom = await prisma.bomTemplate.create({
      data: {
        templateId: 'cmdeiabtc000duglt21fu8qmx', // ID —à–∞–±–ª–æ–Ω–∞ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        includeWaste: true,
        includeSetup: true,
        roundQuantities: true
      }
    })

    const metalBomItems = [
      {
        resourceId: steelProfile.id,
        quantityFormula: 'METAL_WEIGHT',
        quantityUnit: '–∫–≥',
        groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        sortOrder: 10
      },
      {
        resourceId: weldingElectrodes.id,
        quantityFormula: 'WELDING_LENGTH * 0.5',
        quantityUnit: '–∫–≥',
        groupName: '–°–≤–∞—Ä–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        sortOrder: 20
      },
      {
        resourceId: metalCutting.id,
        quantityFormula: 'METAL_WEIGHT * 0.02',
        quantityUnit: '—á–∞—Å',
        groupName: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
        sortOrder: 30
      },
      {
        resourceId: weldingWork.id,
        quantityFormula: 'WELDING_LENGTH * 0.5',
        quantityUnit: '—á–∞—Å',
        groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
        sortOrder: 40
      }
    ]

    for (const item of metalBomItems) {
      await prisma.bomTemplateItem.create({
        data: {
          bomTemplateId: metalBom.id,
          ...item
        }
      })
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω BOM-—à–∞–±–ª–æ–Ω –¥–ª—è –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Å ${metalBomItems.length} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏`)

    // 5. –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—è
    const textileResources = []

    const fabric = await prisma.resource.create({
      data: {
        code: 'MAIN_FABRIC',
        name: '–¢–∫–∞–Ω—å –æ—Å–Ω–æ–≤–Ω–∞—è',
        type: 'MATERIAL',
        baseUnit: '–º¬≤',
        costPrice: 150,
        sellingPrice: 200,
        category: '–¢–∫–∞–Ω–∏'
      }
    })
    textileResources.push(fabric)

    const threads = await prisma.resource.create({
      data: {
        code: 'THREADS',
        name: '–ù–∏—Ç–∫–∏ —à–≤–µ–π–Ω—ã–µ',
        type: 'MATERIAL',
        baseUnit: '–º',
        costPrice: 0.3,
        sellingPrice: 0.5,
        category: '–§—É—Ä–Ω–∏—Ç—É—Ä–∞'
      }
    })
    textileResources.push(threads)

    const sewingWork = await prisma.resource.create({
      data: {
        code: 'SEWING_WORK',
        name: '–ü–æ—à–∏–≤ –∏–∑–¥–µ–ª–∏—è',
        type: 'LABOR',
        baseUnit: '—á–∞—Å',
        costPrice: 250,
        sellingPrice: 350,
        category: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
      }
    })
    textileResources.push(sewingWork)

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${textileResources.length} —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—è`)

    // 6. –°–æ–∑–¥–∞–µ–º BOM-—à–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—è
    const textileBom = await prisma.bomTemplate.create({
      data: {
        templateId: 'cmdeibcpp000dugp4pjkvg82k', // ID —à–∞–±–ª–æ–Ω–∞ —Ç–µ–∫—Å—Ç–∏–ª—è
        includeWaste: true,
        includeSetup: true,
        roundQuantities: true
      }
    })

    const textileBomItems = [
      {
        resourceId: fabric.id,
        quantityFormula: 'FABRIC_CONSUMPTION',
        quantityUnit: '–º¬≤',
        groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        sortOrder: 10
      },
      {
        resourceId: threads.id,
        quantityFormula: 'FABRIC_CONSUMPTION * 100',
        quantityUnit: '–º',
        groupName: '–§—É—Ä–Ω–∏—Ç—É—Ä–∞',
        sortOrder: 20
      },
      {
        resourceId: sewingWork.id,
        quantityFormula: 'sewing_time_calc',
        quantityUnit: '—á–∞—Å',
        groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
        sortOrder: 30
      }
    ]

    for (const item of textileBomItems) {
      await prisma.bomTemplateItem.create({
        data: {
          bomTemplateId: textileBom.id,
          ...item
        }
      })
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω BOM-—à–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—è —Å ${textileBomItems.length} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏`)

    console.log(`\nüéâ –í—Å–µ BOM-—à–∞–±–ª–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!`)
    console.log(`üì¶ –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: ${ladderResources.length + metalResources.length + textileResources.length}`)
    console.log(`üìã –í—Å–µ–≥–æ BOM-—à–∞–±–ª–æ–Ω–æ–≤: 3`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ BOM-—à–∞–±–ª–æ–Ω–æ–≤:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createResourcesAndBomTemplates()

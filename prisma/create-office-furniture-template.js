const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function createOfficeFurnitureTemplate() {
  console.log('üè¢ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ "–û—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å"...')

  try {
    // 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ñ–∏—Å–Ω–æ–π –º–µ–±–µ–ª–∏
    const furnitureParams = [
      {
        code: 'FURNITURE_TYPE',
        name: '–¢–∏–ø –º–µ–±–µ–ª–∏',
        type: 'SELECT',
        selectOptions: JSON.stringify([
          { value: 'desk', label: '–ü–∏—Å—å–º–µ–Ω–Ω—ã–π —Å—Ç–æ–ª' },
          { value: 'cabinet', label: '–®–∫–∞—Ñ' },
          { value: 'chair', label: '–ö—Ä–µ—Å–ª–æ' },
          { value: 'shelf', label: '–°—Ç–µ–ª–ª–∞–∂' }
        ])
      },
      {
        code: 'MATERIAL_TYPE',
        name: '–ú–∞—Ç–µ—Ä–∏–∞–ª',
        type: 'SELECT',
        selectOptions: JSON.stringify([
          { value: 'mdf', label: '–ú–î–§' },
          { value: 'chipboard', label: '–î–°–ü' },
          { value: 'solid_wood', label: '–ú–∞—Å—Å–∏–≤ –¥–µ—Ä–µ–≤–∞' },
          { value: 'metal', label: '–ú–µ—Ç–∞–ª–ª' }
        ])
      },
      {
        code: 'SURFACE_AREA',
        name: '–ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏',
        type: 'AREA',
        unit: '–º¬≤',
        minValue: 0.1,
        maxValue: 50
      },
      {
        code: 'COMPLEXITY',
        name: '–°–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è',
        type: 'SELECT',
        selectOptions: JSON.stringify([
          { value: 'simple', label: '–ü—Ä–æ—Å—Ç–∞—è' },
          { value: 'medium', label: '–°—Ä–µ–¥–Ω—è—è' },
          { value: 'complex', label: '–°–ª–æ–∂–Ω–∞—è' }
        ])
      },
      {
        code: 'FINISH_TYPE',
        name: '–¢–∏–ø –æ—Ç–¥–µ–ª–∫–∏',
        type: 'SELECT',
        selectOptions: JSON.stringify([
          { value: 'laminate', label: '–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' },
          { value: 'veneer', label: '–®–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' },
          { value: 'paint', label: '–ü–æ–∫—Ä–∞—Å–∫–∞' },
          { value: 'none', label: '–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏' }
        ])
      },
      {
        code: 'ORDER_QUANTITY',
        name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü',
        type: 'NUMBER',
        unit: '—à—Ç',
        minValue: 1,
        maxValue: 1000
      },
      {
        code: 'DELIVERY_REQUIRED',
        name: '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞',
        type: 'BOOLEAN'
      }
    ]

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const createdParams = []
    for (const param of furnitureParams) {
      const existingParam = await prisma.parameter.findUnique({
        where: { code: param.code }
      })

      if (!existingParam) {
        const newParam = await prisma.parameter.create({
          data: param
        })
        createdParams.push(newParam)
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: ${param.code}`)
      } else {
        createdParams.push(existingParam)
        console.log(`‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: ${param.code}`)
      }
    }

    // 2. –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è –æ—Ñ–∏—Å–Ω–æ–π –º–µ–±–µ–ª–∏
    const furnitureFormulas = [
      {
        code: 'MATERIAL_COST_CALC',
        name: '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
        expression: 'SURFACE_AREA * (MATERIAL_TYPE === "mdf" ? 2000 : MATERIAL_TYPE === "chipboard" ? 1200 : MATERIAL_TYPE === "solid_wood" ? 5000 : MATERIAL_TYPE === "metal" ? 3000 : 1500)',
        inputParameters: JSON.stringify(['SURFACE_AREA', 'MATERIAL_TYPE']),
        outputType: 'NUMBER',
        outputUnit: '‚ÇΩ'
      },
      {
        code: 'COMPLEXITY_MULTIPLIER',
        name: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
        expression: 'COMPLEXITY === "simple" ? 1.0 : COMPLEXITY === "medium" ? 1.5 : COMPLEXITY === "complex" ? 2.0 : 1.0',
        inputParameters: JSON.stringify(['COMPLEXITY']),
        outputType: 'NUMBER'
      },
      {
        code: 'FINISH_COST_CALC',
        name: '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–¥–µ–ª–∫–∏',
        expression: 'SURFACE_AREA * (FINISH_TYPE === "laminate" ? 500 : FINISH_TYPE === "veneer" ? 1500 : FINISH_TYPE === "paint" ? 800 : 0)',
        inputParameters: JSON.stringify(['SURFACE_AREA', 'FINISH_TYPE']),
        outputType: 'NUMBER',
        outputUnit: '‚ÇΩ'
      },
      {
        code: 'FURNITURE_PRODUCTION_TIME',
        name: '–í—Ä–µ–º—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è',
        expression: 'SURFACE_AREA * complexity_factor * (FURNITURE_TYPE === "desk" ? 2 : FURNITURE_TYPE === "cabinet" ? 3 : FURNITURE_TYPE === "chair" ? 4 : 2.5)',
        inputParameters: JSON.stringify(['SURFACE_AREA', 'COMPLEXITY', 'FURNITURE_TYPE']),
        outputType: 'NUMBER',
        outputUnit: '—á–∞—Å'
      },
      {
        code: 'VOLUME_DISCOUNT_FURNITURE',
        name: '–°–∫–∏–¥–∫–∞ –∑–∞ –æ–±—ä–µ–º',
        expression: 'ORDER_QUANTITY >= 50 ? 20 : ORDER_QUANTITY >= 20 ? 15 : ORDER_QUANTITY >= 10 ? 10 : ORDER_QUANTITY >= 5 ? 5 : 0',
        inputParameters: JSON.stringify(['ORDER_QUANTITY']),
        outputType: 'NUMBER',
        outputUnit: '%'
      }
    ]

    const createdFormulas = []
    for (const formula of furnitureFormulas) {
      const existingFormula = await prisma.formula.findUnique({
        where: { code: formula.code }
      })

      if (!existingFormula) {
        const newFormula = await prisma.formula.create({
          data: formula
        })
        createdFormulas.push(newFormula)
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞: ${formula.code}`)
      } else {
        createdFormulas.push(existingFormula)
        console.log(`‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ–æ—Ä–º—É–ª–∞: ${formula.code}`)
      }
    }

    // 3. –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω "–û—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å"
    const officeTemplate = await prisma.template.create({
      data: {
        code: 'OFFICE_FURNITURE',
        name: '–û—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å',
        description: '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –æ—Ñ–∏—Å–Ω–æ–π –º–µ–±–µ–ª–∏ –Ω–∞ –∑–∞–∫–∞–∑',
        category: '–ú–µ–±–µ–ª—å',
        subcategory: '–û—Ñ–∏—Å–Ω–∞—è',
        basePrice: 15000,
        marginPercent: 30,
        stepByStep: true,
        previewEnabled: true,
        version: '1.0'
      }
    })

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω: ${officeTemplate.name} (ID: ${officeTemplate.id})`)

    // 4. –°–≤—è–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —à–∞–±–ª–æ–Ω–æ–º
    for (let i = 0; i < createdParams.length; i++) {
      const param = createdParams[i]
      const isRequired = ['FURNITURE_TYPE', 'MATERIAL_TYPE', 'SURFACE_AREA', 'ORDER_QUANTITY'].includes(param.code)

      await prisma.templateParameter.create({
        data: {
          templateId: officeTemplate.id,
          parameterId: param.id,
          isRequired,
          sortOrder: (i + 1) * 10
        }
      })
      console.log(`‚úÖ –°–≤—è–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä ${param.code} —Å —à–∞–±–ª–æ–Ω–æ–º`)
    }

    // 5. –°–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã —Å —à–∞–±–ª–æ–Ω–æ–º
    for (let i = 0; i < createdFormulas.length; i++) {
      const formula = createdFormulas[i]
      const templateFormula = await prisma.templateFormula.create({
        data: {
          templateId: officeTemplate.id,
          formulaId: formula.id,
          executionOrder: (i + 1) * 10,
          outputVariable: formula.code.toLowerCase(),
          outputLabel: formula.name
        }
      })
      console.log(`‚úÖ –°–≤—è–∑–∞–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ ${formula.code} —Å —à–∞–±–ª–æ–Ω–æ–º`)
    }

    console.log(`\nüéâ –®–∞–±–ª–æ–Ω "–û—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`)
    console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${createdParams.length}`)
    console.log(`üßÆ –§–æ—Ä–º—É–ª: ${createdFormulas.length}`)
    console.log(`üÜî ID —à–∞–±–ª–æ–Ω–∞: ${officeTemplate.id}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createOfficeFurnitureTemplate()

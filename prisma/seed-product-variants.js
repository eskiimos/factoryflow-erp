const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function seedProductVariants() {
  console.log('üå± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...')

  try {
    // –ù–∞–π–¥–µ–º –ø—Ä–æ–¥—É–∫—Ç "–õ–µ—Å—Ç–Ω–∏—Ü–∞" 
    const ladderProduct = await prisma.product.findFirst({
      where: {
        OR: [
          { name: { contains: '–õ–µ—Å—Ç–Ω–∏—Ü–∞' } },
          { name: { contains: '–ª–µ—Å—Ç–Ω–∏—Ü–∞' } },
          { sku: { contains: 'LADDER' } }
        ]
      }
    })

    if (!ladderProduct) {
      console.log('‚ùå –ü—Ä–æ–¥—É–∫—Ç "–õ–µ—Å—Ç–Ω–∏—Ü–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: ${ladderProduct.name}`)

    // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–µ—Å—Ç–Ω–∏—Ü
    const variants = [
      {
        name: '–õ–µ—Å—Ç–Ω–∏—Ü–∞ 1.5–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è',
        sku: 'LADDER-150-STD',
        description: '–õ–µ—Å—Ç–Ω–∏—Ü–∞ –≤—ã—Å–æ—Ç–æ–π 1.5–º, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è',
        specifications: JSON.stringify({
          height: '150—Å–º',
          material: '–ê–ª—é–º–∏–Ω–∏–π',
          weight: '3–∫–≥',
          maxLoad: '120–∫–≥',
          steps: 5
        }),
        priceModifier: -15, // -15% –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã
        priceModifierType: 'PERCENTAGE',
        costModifier: -10,
        costModifierType: 'PERCENTAGE',
        productionTimeModifier: -0.5, // –Ω–∞ –ø–æ–ª—á–∞—Å–∞ –±—ã—Å—Ç—Ä–µ–µ
        weight: 3,
        dimensions: JSON.stringify({
          length: 150,
          width: 45,
          height: 10
        }),
        stockQuantity: 25,
        minStock: 5,
        maxStock: 50,
        sortOrder: 1
      },
      {
        name: '–õ–µ—Å—Ç–Ω–∏—Ü–∞ 2–º —Å –ø–æ—Ä—É—á–Ω—è–º–∏',
        sku: 'LADDER-200-HANDRAIL',
        description: '–õ–µ—Å—Ç–Ω–∏—Ü–∞ –≤—ã—Å–æ—Ç–æ–π 2–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ—Ä—É—á–Ω—è–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        specifications: JSON.stringify({
          height: '200—Å–º',
          material: '–ê–ª—é–º–∏–Ω–∏–π',
          weight: '4.5–∫–≥',
          maxLoad: '150–∫–≥',
          steps: 7,
          hasHandrail: true
        }),
        priceModifier: 0, // –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
        priceModifierType: 'PERCENTAGE',
        costModifier: 0,
        costModifierType: 'PERCENTAGE',
        productionTimeModifier: 0,
        weight: 4.5,
        dimensions: JSON.stringify({
          length: 200,
          width: 50,
          height: 12
        }),
        stockQuantity: 15,
        minStock: 3,
        maxStock: 30,
        sortOrder: 2
      },
      {
        name: '–õ–µ—Å—Ç–Ω–∏—Ü–∞ 2.5–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è',
        sku: 'LADDER-250-PRO',
        description: '–£—Å–∏–ª–µ–Ω–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞ –≤—ã—Å–æ—Ç–æ–π 2.5–º –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
        specifications: JSON.stringify({
          height: '250—Å–º',
          material: '–£—Å–∏–ª–µ–Ω–Ω—ã–π –∞–ª—é–º–∏–Ω–∏–π',
          weight: '6–∫–≥',
          maxLoad: '200–∫–≥',
          steps: 9,
          hasHandrail: true,
          hasStabilizer: true,
          professional: true
        }),
        priceModifier: 25, // +25% –∫ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–µ
        priceModifierType: 'PERCENTAGE',
        costModifier: 20,
        costModifierType: 'PERCENTAGE',
        productionTimeModifier: 1, // –Ω–∞ —á–∞—Å –¥–æ–ª—å—à–µ
        weight: 6,
        dimensions: JSON.stringify({
          length: 250,
          width: 55,
          height: 15
        }),
        stockQuantity: 8,
        minStock: 2,
        maxStock: 20,
        sortOrder: 3
      },
      {
        name: '–õ–µ—Å—Ç–Ω–∏—Ü–∞ 3–º –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è',
        sku: 'LADDER-300-IND',
        description: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞ –≤—ã—Å–æ—Ç–æ–π 3–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å—é',
        specifications: JSON.stringify({
          height: '300—Å–º',
          material: '–°—Ç–∞–ª—å —Å –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º',
          weight: '8.5–∫–≥',
          maxLoad: '250–∫–≥',
          steps: 12,
          hasHandrail: true,
          hasStabilizer: true,
          hasLockingMechanism: true,
          industrial: true
        }),
        priceModifier: 50, // +50% –∫ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–µ
        priceModifierType: 'PERCENTAGE',
        costModifier: 40,
        costModifierType: 'PERCENTAGE',
        productionTimeModifier: 2, // –Ω–∞ 2 —á–∞—Å–∞ –¥–æ–ª—å—à–µ
        weight: 8.5,
        dimensions: JSON.stringify({
          length: 300,
          width: 60,
          height: 18
        }),
        stockQuantity: 5,
        minStock: 1,
        maxStock: 15,
        sortOrder: 4
      }
    ]

    for (const variantData of variants) {
      console.log(`üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞: ${variantData.name}`)
      
      const variant = await prisma.productVariant.create({
        data: {
          ...variantData,
          productId: ladderProduct.id
        }
      })

      // –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      const specs = JSON.parse(variantData.specifications)
      const attributes = [
        { name: '–í—ã—Å–æ—Ç–∞', value: specs.height, type: 'TEXT', unit: '—Å–º', order: 1 },
        { name: '–ú–∞—Ç–µ—Ä–∏–∞–ª', value: specs.material, type: 'SELECT', order: 2 },
        { name: '–í–µ—Å', value: specs.weight, type: 'TEXT', unit: '–∫–≥', order: 3 },
        { name: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞', value: specs.maxLoad, type: 'TEXT', unit: '–∫–≥', order: 4 },
        { name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–ø–µ–Ω–µ–π', value: specs.steps.toString(), type: 'NUMBER', unit: '—à—Ç', order: 5 }
      ]

      for (const attr of attributes) {
        await prisma.variantAttribute.create({
          data: {
            variantId: variant.id,
            attributeName: attr.name,
            attributeValue: attr.value,
            attributeType: attr.type,
            unit: attr.unit,
            displayOrder: attr.order
          }
        })
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
      const options = []
      
      if (variantData.name.includes('—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è')) {
        options.push(
          {
            name: '–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—É—á–Ω–∏',
            description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä—É—á–Ω–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            type: 'ADDON',
            priceModifier: 800,
            priceModifierType: 'FIXED',
            costModifier: 500,
            costModifierType: 'FIXED',
            productionTimeModifier: 0.3,
            sortOrder: 1
          },
          {
            name: '–£—Å–∏–ª–µ–Ω–Ω—ã–µ —Å—Ç—É–ø–µ–Ω–∏',
            description: '–ü—Ä–æ—Ç–∏–≤–æ—Å–∫–æ–ª—å–∑—è—â–∏–µ —É—Å–∏–ª–µ–Ω–Ω—ã–µ —Å—Ç—É–ø–µ–Ω–∏',
            type: 'ADDON',
            priceModifier: 600,
            priceModifierType: 'FIXED',
            costModifier: 400,
            costModifierType: 'FIXED',
            productionTimeModifier: 0.2,
            sortOrder: 2
          }
        )
      }

      if (variantData.name.includes('–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è') || variantData.name.includes('–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è')) {
        options.push(
          {
            name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è —Å—É–º–∫–∞',
            description: '–£–¥–æ–±–Ω–∞—è —Å—É–º–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏',
            type: 'ADDON',
            priceModifier: 1200,
            priceModifierType: 'FIXED',
            costModifier: 800,
            costModifierType: 'FIXED',
            productionTimeModifier: 0,
            sortOrder: 3
          },
          {
            name: '–ö–æ–º–ø–ª–µ–∫—Ç –∫—Ä–µ–ø–µ–∂–∞',
            description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—Ä–µ–ø–µ–∂ –¥–ª—è —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏',
            type: 'ADDON',
            priceModifier: 500,
            priceModifierType: 'FIXED',
            costModifier: 300,
            costModifierType: 'FIXED',
            productionTimeModifier: 0.1,
            sortOrder: 4
          }
        )
      }

      // –û–±—â–∏–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      options.push(
        {
          name: '–¶–≤–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è',
          description: '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π –∏–ª–∏ —á–µ—Ä–Ω—ã–π',
          type: 'ALTERNATIVE',
          priceModifier: 0,
          priceModifierType: 'FIXED',
          costModifier: 0,
          costModifierType: 'FIXED',
          productionTimeModifier: 0.5,
          isDefault: true,
          sortOrder: 10
        },
        {
          name: '–ì–∞—Ä–∞–Ω—Ç–∏—è 2 –≥–æ–¥–∞',
          description: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ 2 –≥–æ–¥–∞',
          type: 'ADDON',
          priceModifier: 10,
          priceModifierType: 'PERCENTAGE',
          costModifier: 0,
          costModifierType: 'FIXED',
          productionTimeModifier: 0,
          sortOrder: 11
        }
      )

      for (const optionData of options) {
        await prisma.variantOption.create({
          data: {
            ...optionData,
            variantId: variant.id
          }
        })
      }

      console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${attributes.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ ${options.length} –æ–ø—Ü–∏–π`)
    }

    console.log(`üéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞!`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalVariants = await prisma.productVariant.count()
    const totalAttributes = await prisma.variantAttribute.count()
    const totalOptions = await prisma.variantOption.count()
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:`)
    console.log(`  - –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${totalVariants}`)
    console.log(`  - –í—Å–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${totalAttributes}`)
    console.log(`  - –í—Å–µ–≥–æ –æ–ø—Ü–∏–π: ${totalOptions}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error)
  }
}

async function main() {
  await seedProductVariants()
  await prisma.$disconnect()
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function createTextileTemplate() {
  console.log('üßµ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ "–¢–µ–∫—Å—Ç–∏–ª—å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è"...')

  try {
    // 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—è
    const textileParams = [
      {
        code: 'PRODUCT_TYPE',
        name: '–¢–∏–ø –∏–∑–¥–µ–ª–∏—è',
        type: 'SELECT',
        selectOptions: JSON.stringify([
          { value: 'shirt', label: '–†—É–±–∞—à–∫–∞' },
          { value: 'dress', label: '–ü–ª–∞—Ç—å–µ' },
          { value: 'pants', label: '–ë—Ä—é–∫–∏' },
          { value: 'jacket', label: '–ö—É—Ä—Ç–∫–∞' },
          { value: 'bed_linen', label: '–ü–æ—Å—Ç–µ–ª—å–Ω–æ–µ –±–µ–ª—å–µ' },
          { value: 'curtains', label: '–®—Ç–æ—Ä—ã' }
        ])
      },
      {
        code: 'FABRIC_TYPE',
        name: '–¢–∏–ø —Ç–∫–∞–Ω–∏',
        type: 'SELECT',
        selectOptions: JSON.stringify([
          { value: 'cotton', label: '–•–ª–æ–ø–æ–∫' },
          { value: 'linen', label: '–õ–µ–Ω' },
          { value: 'wool', label: '–®–µ—Ä—Å—Ç—å' },
          { value: 'silk', label: '–®–µ–ª–∫' },
          { value: 'polyester', label: '–ü–æ–ª–∏—ç—Å—Ç–µ—Ä' },
          { value: 'mixed', label: '–°–º–µ—à–∞–Ω–Ω—ã–µ –≤–æ–ª–æ–∫–Ω–∞' }
        ])
      },
      {
        code: 'FABRIC_CONSUMPTION',
        name: '–†–∞—Å—Ö–æ–¥ —Ç–∫–∞–Ω–∏',
        type: 'NUMBER',
        unit: '–º¬≤',
        minValue: 0.1,
        maxValue: 100
      },
      {
        code: 'SIZE_RANGE',
        name: '–†–∞–∑–º–µ—Ä–Ω–∞—è —Å–µ—Ç–∫–∞',
        type: 'SELECT',
        selectOptions: JSON.stringify([
          { value: 'xs_s', label: 'XS-S' },
          { value: 'm_l', label: 'M-L' },
          { value: 'xl_xxl', label: 'XL-XXL' },
          { value: 'children', label: '–î–µ—Ç—Å–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç' },
          { value: 'universal', label: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä' }
        ])
      },
      {
        code: 'COMPLEXITY_LEVEL',
        name: '–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ—à–∏–≤–∞',
        type: 'SELECT',
        selectOptions: JSON.stringify([
          { value: 'simple', label: '–ü—Ä–æ—Å—Ç–∞—è' },
          { value: 'medium', label: '–°—Ä–µ–¥–Ω—è—è' },
          { value: 'complex', label: '–°–ª–æ–∂–Ω–∞—è' },
          { value: 'premium', label: '–ü—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å' }
        ])
      },
      {
        code: 'FINISHING_TYPE',
        name: '–¢–∏–ø –æ—Ç–¥–µ–ª–∫–∏',
        type: 'SELECT',
        selectOptions: JSON.stringify([
          { value: 'none', label: '–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏' },
          { value: 'embroidery', label: '–í—ã—à–∏–≤–∫–∞' },
          { value: 'print', label: '–ü—Ä–∏–Ω—Ç' },
          { value: 'beads', label: '–ë–∏—Å–µ—Ä/—Å—Ç—Ä–∞–∑—ã' },
          { value: 'lace', label: '–ö—Ä—É–∂–µ–≤–æ' }
        ])
      },
      {
        code: 'BATCH_SIZE',
        name: '–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏',
        type: 'NUMBER',
        unit: '—à—Ç',
        minValue: 1,
        maxValue: 10000
      }
    ]

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const createdParams = []
    for (const param of textileParams) {
      const existingParam = await prisma.parameter.findUnique({
        where: { code: param.code }
      })

      if (!existingParam) {
        const newParam = await prisma.parameter.create({
          data: param
        })
        createdParams.push(newParam)
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: ${param.code}`)
      } else {
        createdParams.push(existingParam)
        console.log(`‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: ${param.code}`)
      }
    }

    // 2. –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—å–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π
    const textileFormulas = [
      {
        code: 'FABRIC_COST_CALC',
        name: '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∫–∞–Ω–∏',
        expression: 'FABRIC_CONSUMPTION * (FABRIC_TYPE === "cotton" ? 150 : FABRIC_TYPE === "linen" ? 250 : FABRIC_TYPE === "wool" ? 400 : FABRIC_TYPE === "silk" ? 800 : FABRIC_TYPE === "polyester" ? 100 : FABRIC_TYPE === "mixed" ? 200 : 150)',
        inputParameters: JSON.stringify(['FABRIC_CONSUMPTION', 'FABRIC_TYPE']),
        outputType: 'NUMBER',
        outputUnit: '‚ÇΩ'
      },
      {
        code: 'SEWING_TIME_CALC',
        name: '–í—Ä–µ–º—è –ø–æ—à–∏–≤–∞',
        expression: '(PRODUCT_TYPE === "shirt" ? 2.5 : PRODUCT_TYPE === "dress" ? 4 : PRODUCT_TYPE === "pants" ? 3 : PRODUCT_TYPE === "jacket" ? 6 : PRODUCT_TYPE === "bed_linen" ? 1.5 : PRODUCT_TYPE === "curtains" ? 2 : 3) * (COMPLEXITY_LEVEL === "simple" ? 1 : COMPLEXITY_LEVEL === "medium" ? 1.3 : COMPLEXITY_LEVEL === "complex" ? 1.7 : COMPLEXITY_LEVEL === "premium" ? 2.2 : 1)',
        inputParameters: JSON.stringify(['PRODUCT_TYPE', 'COMPLEXITY_LEVEL']),
        outputType: 'NUMBER',
        outputUnit: '—á–∞—Å'
      },
      {
        code: 'SEWING_COST_CALC',
        name: '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—à–∏–≤–∞',
        expression: '(PRODUCT_TYPE === "shirt" ? 2.5 : PRODUCT_TYPE === "dress" ? 4 : PRODUCT_TYPE === "pants" ? 3 : PRODUCT_TYPE === "jacket" ? 6 : PRODUCT_TYPE === "bed_linen" ? 1.5 : PRODUCT_TYPE === "curtains" ? 2 : 3) * (COMPLEXITY_LEVEL === "simple" ? 1 : COMPLEXITY_LEVEL === "medium" ? 1.3 : COMPLEXITY_LEVEL === "complex" ? 1.7 : COMPLEXITY_LEVEL === "premium" ? 2.2 : 1) * 350',
        inputParameters: JSON.stringify(['PRODUCT_TYPE', 'COMPLEXITY_LEVEL']),
        outputType: 'NUMBER',
        outputUnit: '‚ÇΩ'
      },
      {
        code: 'FINISHING_COST_CALC',
        name: '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–¥–µ–ª–∫–∏',
        expression: '(FINISHING_TYPE === "none" ? 0 : FINISHING_TYPE === "embroidery" ? 500 : FINISHING_TYPE === "print" ? 200 : FINISHING_TYPE === "beads" ? 800 : FINISHING_TYPE === "lace" ? 300 : 0) * (SIZE_RANGE === "xs_s" ? 0.8 : SIZE_RANGE === "xl_xxl" ? 1.3 : SIZE_RANGE === "children" ? 0.6 : 1)',
        inputParameters: JSON.stringify(['FINISHING_TYPE', 'SIZE_RANGE']),
        outputType: 'NUMBER',
        outputUnit: '‚ÇΩ'
      },
      {
        code: 'PACKAGING_COST_CALC',
        name: '–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏',
        expression: '(PRODUCT_TYPE === "jacket" || PRODUCT_TYPE === "dress" ? 50 : PRODUCT_TYPE === "bed_linen" ? 80 : 30) * (COMPLEXITY_LEVEL === "premium" ? 2 : 1)',
        inputParameters: JSON.stringify(['PRODUCT_TYPE', 'COMPLEXITY_LEVEL']),
        outputType: 'NUMBER',
        outputUnit: '‚ÇΩ'
      },
      {
        code: 'BATCH_DISCOUNT_CALC',
        name: '–°–∫–∏–¥–∫–∞ –∑–∞ –ø–∞—Ä—Ç–∏—é',
        expression: 'BATCH_SIZE >= 1000 ? 30 : BATCH_SIZE >= 500 ? 25 : BATCH_SIZE >= 200 ? 20 : BATCH_SIZE >= 100 ? 15 : BATCH_SIZE >= 50 ? 10 : BATCH_SIZE >= 20 ? 5 : 0',
        inputParameters: JSON.stringify(['BATCH_SIZE']),
        outputType: 'NUMBER',
        outputUnit: '%'
      }
    ]

    const createdFormulas = []
    for (const formula of textileFormulas) {
      const existingFormula = await prisma.formula.findUnique({
        where: { code: formula.code }
      })

      if (!existingFormula) {
        const newFormula = await prisma.formula.create({
          data: formula
        })
        createdFormulas.push(newFormula)
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞: ${formula.code}`)
      } else {
        createdFormulas.push(existingFormula)
        console.log(`‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ–æ—Ä–º—É–ª–∞: ${formula.code}`)
      }
    }

    // 3. –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω "–¢–µ–∫—Å—Ç–∏–ª—å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è"
    const textileTemplate = await prisma.template.create({
      data: {
        code: 'TEXTILE_PRODUCTS',
        name: '–¢–µ–∫—Å—Ç–∏–ª—å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
        description: '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—à–∏–≤–∞ —Ç–µ–∫—Å—Ç–∏–ª—å–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –∏ –æ–¥–µ–∂–¥—ã',
        category: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
        subcategory: '–¢–µ–∫—Å—Ç–∏–ª—å –∏ –æ–¥–µ–∂–¥–∞',
        basePrice: 1500,
        marginPercent: 45,
        stepByStep: true,
        previewEnabled: true,
        version: '1.0'
      }
    })

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω: ${textileTemplate.name} (ID: ${textileTemplate.id})`)

    // 4. –°–≤—è–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —à–∞–±–ª–æ–Ω–æ–º
    for (let i = 0; i < createdParams.length; i++) {
      const param = createdParams[i]
      const isRequired = ['PRODUCT_TYPE', 'FABRIC_TYPE', 'FABRIC_CONSUMPTION', 'BATCH_SIZE'].includes(param.code)

      await prisma.templateParameter.create({
        data: {
          templateId: textileTemplate.id,
          parameterId: param.id,
          isRequired,
          sortOrder: (i + 1) * 10
        }
      })
      console.log(`‚úÖ –°–≤—è–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä ${param.code} —Å —à–∞–±–ª–æ–Ω–æ–º`)
    }

    // 5. –°–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã —Å —à–∞–±–ª–æ–Ω–æ–º
    for (let i = 0; i < createdFormulas.length; i++) {
      const formula = createdFormulas[i]
      const templateFormula = await prisma.templateFormula.create({
        data: {
          templateId: textileTemplate.id,
          formulaId: formula.id,
          executionOrder: (i + 1) * 10,
          outputVariable: formula.code.toLowerCase(),
          outputLabel: formula.name
        }
      })
      console.log(`‚úÖ –°–≤—è–∑–∞–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ ${formula.code} —Å —à–∞–±–ª–æ–Ω–æ–º`)
    }

    console.log(`\nüéâ –®–∞–±–ª–æ–Ω "–¢–µ–∫—Å—Ç–∏–ª—å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`)
    console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${createdParams.length}`)
    console.log(`üßÆ –§–æ—Ä–º—É–ª: ${createdFormulas.length}`)
    console.log(`üÜî ID —à–∞–±–ª–æ–Ω–∞: ${textileTemplate.id}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createTextileTemplate()

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function seedPlanningData() {
  console.log('üå± Seeding planning data...')

  try {
    // –°–æ–∑–¥–∞–µ–º –±—é–¥–∂–µ—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã
    const budgetPlan1 = await prisma.budgetPlan.create({
      data: {
        name: '–ë—é–¥–∂–µ—Ç Q1 2024',
        description: '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª 2024 –≥–æ–¥–∞',
        planType: 'QUARTERLY',
        startDate: new Date('2024-01-01'),
        endDate: new Date('2024-03-31'),
        status: 'ACTIVE',
        totalRevenue: 2500000,
        totalCosts: 1800000,
        materialCosts: 1200000,
        laborCosts: 600000,
        overheadCosts: 200000,
        targetProfit: 500000
      }
    })

    const budgetPlan2 = await prisma.budgetPlan.create({
      data: {
        name: '–ì–æ–¥–æ–≤–æ–π –±—é–¥–∂–µ—Ç 2024',
        description: '–û—Å–Ω–æ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ 2024 –≥–æ–¥',
        planType: 'ANNUAL',
        startDate: new Date('2024-01-01'),
        endDate: new Date('2024-12-31'),
        status: 'DRAFT',
        totalRevenue: 12000000,
        totalCosts: 8500000,
        materialCosts: 5500000,
        laborCosts: 2500000,
        overheadCosts: 1000000,
        targetProfit: 2500000
      }
    })

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞–Ω–∞
    await prisma.budgetCategory.createMany({
      data: [
        {
          budgetPlanId: budgetPlan1.id,
          name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞',
          categoryType: 'EXPENSE',
          plannedAmount: 150000,
          actualAmount: 120000
        },
        {
          budgetPlanId: budgetPlan1.id,
          name: '–û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
          categoryType: 'EXPENSE',
          plannedAmount: 80000,
          actualAmount: 75000
        },
        {
          budgetPlanId: budgetPlan1.id,
          name: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏',
          categoryType: 'INCOME',
          plannedAmount: 2300000,
          actualAmount: 2100000
        }
      ]
    })

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–æ–¥–∞–∂
    const salesForecast1 = await prisma.salesForecast.create({
      data: {
        budgetPlanId: budgetPlan1.id,
        name: '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ Q1 2024',
        forecastType: 'PRODUCT_BASED',
        startDate: new Date('2024-01-01'),
        endDate: new Date('2024-03-31'),
        periodType: 'MONTHLY',
        totalQuantity: 1500,
        totalRevenue: 2300000,
        averagePrice: 1533,
        growthRate: 15,
        seasonality: 1.2,
        marketTrend: 1.1,
        confidence: 'HIGH',
        methodology: '–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤',
        notes: '–ü—Ä–æ–≥–Ω–æ–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–æ—Å—Ç–µ —Å–ø—Ä–æ—Å–∞ –≤ –ø–µ—Ä–≤–æ–º –∫–≤–∞—Ä—Ç–∞–ª–µ'
      }
    })

    const salesForecast2 = await prisma.salesForecast.create({
      data: {
        name: '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º 2024',
        forecastType: 'CATEGORY_BASED',
        startDate: new Date('2024-01-01'),
        endDate: new Date('2024-12-31'),
        periodType: 'QUARTERLY',
        totalQuantity: 8000,
        totalRevenue: 11500000,
        averagePrice: 1437,
        growthRate: 8,
        seasonality: 1.0,
        marketTrend: 1.05,
        confidence: 'MEDIUM',
        methodology: '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
        notes: '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤–µ—Å—å –≥–æ–¥'
      }
    })

    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    const products = await prisma.product.findMany({
      take: 3,
      where: { isActive: true }
    })

    if (products.length > 0) {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
      const productForecasts = products.map((product, index) => ({
        salesForecastId: salesForecast1.id,
        productId: product.id,
        plannedQuantity: 500 + (index * 200),
        plannedRevenue: (500 + (index * 200)) * (product.sellingPrice || 1000),
        plannedPrice: product.sellingPrice || 1000,
        actualQuantity: 400 + (index * 150),
        actualRevenue: (400 + (index * 150)) * (product.sellingPrice || 1000),
        actualPrice: product.sellingPrice || 1000,
        priority: index === 0 ? 'HIGH' : index === 1 ? 'MEDIUM' : 'LOW',
        notes: `–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.name}`
      }))

      await prisma.productSalesForecast.createMany({
        data: productForecasts
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = await prisma.category.findMany({
      take: 2,
      where: { isActive: true }
    })

    if (categories.length > 0) {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–æ–¥–∞–∂ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const categoryForecasts = categories.map((category, index) => ({
        salesForecastId: salesForecast2.id,
        categoryId: category.id,
        plannedQuantity: 2000 + (index * 1000),
        plannedRevenue: (2000 + (index * 1000)) * 1500,
        actualQuantity: 1800 + (index * 900),
        actualRevenue: (1800 + (index * 900)) * 1500,
        notes: `–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}`
      }))

      await prisma.categorySalesForecast.createMany({
        data: categoryForecasts
      })
    }

    console.log('‚úÖ Planning data seeded successfully!')
    console.log(`üìä Created:`)
    console.log(`   - ${2} budget plans`)
    console.log(`   - ${3} budget categories`)
    console.log(`   - ${2} sales forecasts`)
    if (products.length > 0) {
      console.log(`   - ${products.length} product forecasts`)
    }
    if (categories.length > 0) {
      console.log(`   - ${categories.length} category forecasts`)
    }

  } catch (error) {
    console.error('‚ùå Error seeding planning data:', error)
  } finally {
    await prisma.$disconnect()
  }
}

if (require.main === module) {
  seedPlanningData()
}

module.exports = { seedPlanningData }

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function createLadderTemplate() {
  console.log('ü™ú –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞"...')

  try {
    // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
    const template = await prisma.template.create({
      data: {
        code: 'LADDER_WOOD',
        name: '–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞',
        description: '–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–π –ª–µ—Å—Ç–Ω–∏—Ü—ã –Ω–∞ –∑–∞–∫–∞–∑ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –æ–ø—Ü–∏–π',
        category: '–õ–µ—Å—Ç–Ω–∏—Ü—ã',
        subcategory: '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ',
        basePrice: 50000,
        marginPercent: 30,
        baseLaborTime: 8,
        setupTime: 1,
        department: '–°—Ç–æ–ª—è—Ä–Ω—ã–π —Ü–µ—Ö',
        stepByStep: true,
        previewEnabled: true,
        formLayout: JSON.stringify({
          steps: [
            {
              name: '–†–∞–∑–º–µ—Ä—ã',
              fields: ['LENGTH', 'WIDTH', 'HEIGHT', 'STEPS_COUNT']
            },
            {
              name: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', 
              fields: ['WOOD_TYPE', 'THICKNESS']
            },
            {
              name: '–û–ø—Ü–∏–∏',
              fields: ['HAS_HANDRAIL', 'HAS_COATING']
            },
            {
              name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
              fields: ['QUANTITY']
            }
          ]
        }),
        status: 'ACTIVE'
      }
    })

    console.log(`‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: ${template.name} (ID: ${template.id})`)

    // –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const parameters = await prisma.parameter.findMany({
      where: {
        code: {
          in: ['LENGTH', 'WIDTH', 'HEIGHT', 'THICKNESS', 'WOOD_TYPE', 'QUANTITY', 'STEPS_COUNT', 'HAS_HANDRAIL', 'HAS_COATING']
        }
      }
    })

    console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫ —à–∞–±–ª–æ–Ω—É...')

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ —à–∞–±–ª–æ–Ω—É —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const templateParameters = [
      {
        parameterCode: 'LENGTH',
        displayName: '–î–ª–∏–Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü—ã',
        helpText: '–û–±—â–∞—è –¥–ª–∏–Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü—ã –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö',
        groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã',
        isRequired: true,
        sortOrder: 1,
        customMinValue: 1000,
        customMaxValue: 4000,
        customDefaultValue: JSON.stringify(2500)
      },
      {
        parameterCode: 'WIDTH',
        displayName: '–®–∏—Ä–∏–Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü—ã', 
        helpText: '–®–∏—Ä–∏–Ω–∞ —Å—Ç—É–ø–µ–Ω–µ–π –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö',
        groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã',
        isRequired: true,
        sortOrder: 2,
        customMinValue: 600,
        customMaxValue: 1200,
        customDefaultValue: JSON.stringify(800)
      },
      {
        parameterCode: 'HEIGHT',
        displayName: '–í—ã—Å–æ—Ç–∞ –ø–æ–¥—ä–µ–º–∞',
        helpText: '–û–±—â–∞—è –≤—ã—Å–æ—Ç–∞ –ª–µ—Å—Ç–Ω–∏—Ü—ã –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö',
        groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã',
        isRequired: true,
        sortOrder: 3,
        customMinValue: 1500,
        customMaxValue: 3500,
        customDefaultValue: JSON.stringify(2800)
      },
      {
        parameterCode: 'STEPS_COUNT',
        displayName: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–ø–µ–Ω–µ–π',
        helpText: '–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞',
        groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã',
        isRequired: false,
        sortOrder: 4
      },
      {
        parameterCode: 'THICKNESS',
        displayName: '–¢–æ–ª—â–∏–Ω–∞ —Å—Ç—É–ø–µ–Ω–µ–π',
        helpText: '–¢–æ–ª—â–∏–Ω–∞ –¥–æ—Å–∫–∏ –¥–ª—è —Å—Ç—É–ø–µ–Ω–µ–π',
        groupName: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
        isRequired: true,
        sortOrder: 10,
        customMinValue: 30,
        customMaxValue: 50,
        customDefaultValue: JSON.stringify(40)
      },
      {
        parameterCode: 'WOOD_TYPE',
        displayName: '–¢–∏–ø –¥—Ä–µ–≤–µ—Å–∏–Ω—ã',
        helpText: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–¥—É –¥–µ—Ä–µ–≤–∞',
        groupName: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
        isRequired: true,
        sortOrder: 11
      },
      {
        parameterCode: 'HAS_HANDRAIL',
        displayName: '–ü–æ—Ä—É—á–Ω–∏',
        helpText: '–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—É—á–Ω–∏ —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω',
        groupName: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏',
        sortOrder: 20,
        customDefaultValue: JSON.stringify(true)
      },
      {
        parameterCode: 'HAS_COATING',
        displayName: '–ó–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ',
        helpText: '–õ–∞–∫–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ –ø–æ–∫—Ä–∞—Å–∫–∞ –∏–∑–¥–µ–ª–∏—è',
        groupName: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏',
        sortOrder: 21,
        customDefaultValue: JSON.stringify(false)
      },
      {
        parameterCode: 'QUANTITY',
        displayName: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        helpText: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Å—Ç–Ω–∏—Ü –∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é',
        groupName: '–ó–∞–∫–∞–∑',
        isRequired: true,
        sortOrder: 30,
        customMinValue: 1,
        customMaxValue: 20
      }
    ]

    for (const tpData of templateParameters) {
      const parameter = parameters.find(p => p.code === tpData.parameterCode)
      if (parameter) {
        const templateParam = await prisma.templateParameter.create({
          data: {
            templateId: template.id,
            parameterId: parameter.id,
            displayName: tpData.displayName,
            helpText: tpData.helpText,
            groupName: tpData.groupName,
            isRequired: tpData.isRequired,
            sortOrder: tpData.sortOrder,
            customMinValue: tpData.customMinValue,
            customMaxValue: tpData.customMaxValue,
            customDefaultValue: tpData.customDefaultValue
          }
        })
        console.log(`  ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä: ${tpData.displayName}`)
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã
    const formulas = await prisma.formula.findMany({
      where: {
        code: {
          in: ['CALC_VOLUME', 'CALC_STEPS_AUTO', 'CALC_HANDRAIL_LENGTH', 'WOOD_PRICE_MODIFIER', 'CALC_PRODUCTION_TIME', 'QUANTITY_DISCOUNT']
        }
      }
    })

    console.log('üßÆ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª –∫ —à–∞–±–ª–æ–Ω—É...')

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const templateFormulas = [
      {
        formulaCode: 'CALC_STEPS_AUTO',
        executionOrder: 10,
        outputVariable: 'calculated_steps',
        outputLabel: '–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–ø–µ–Ω–µ–π'
      },
      {
        formulaCode: 'CALC_VOLUME',
        executionOrder: 20,
        outputVariable: 'wood_volume',
        outputLabel: '–û–±—ä–µ–º –¥—Ä–µ–≤–µ—Å–∏–Ω—ã'
      },
      {
        formulaCode: 'CALC_HANDRAIL_LENGTH',
        executionOrder: 30,
        outputVariable: 'handrail_length',
        outputLabel: '–î–ª–∏–Ω–∞ –ø–æ—Ä—É—á–Ω—è'
      },
      {
        formulaCode: 'WOOD_PRICE_MODIFIER',
        executionOrder: 40,
        outputVariable: 'wood_modifier',
        outputLabel: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ü–µ–Ω—ã –¥—Ä–µ–≤–µ—Å–∏–Ω—ã'
      },
      {
        formulaCode: 'CALC_PRODUCTION_TIME',
        executionOrder: 50,
        outputVariable: 'production_time',
        outputLabel: '–í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞'
      },
      {
        formulaCode: 'QUANTITY_DISCOUNT',
        executionOrder: 60,
        outputVariable: 'discount_percent',
        outputLabel: '–°–∫–∏–¥–∫–∞ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
      }
    ]

    for (const tfData of templateFormulas) {
      const formula = formulas.find(f => f.code === tfData.formulaCode)
      if (formula) {
        const templateFormula = await prisma.templateFormula.create({
          data: {
            templateId: template.id,
            formulaId: formula.id,
            executionOrder: tfData.executionOrder,
            outputVariable: tfData.outputVariable,
            outputLabel: tfData.outputLabel
          }
        })
        console.log(`  ‚úÖ –§–æ—Ä–º—É–ª–∞: ${tfData.outputLabel}`)
      }
    }

    // –°–æ–∑–¥–∞–µ–º BOM —à–∞–±–ª–æ–Ω
    const bomTemplate = await prisma.bomTemplate.create({
      data: {
        templateId: template.id,
        includeWaste: true,
        includeSetup: true,
        roundQuantities: true
      }
    })

    console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ BOM...')

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    const resources = await prisma.resource.findMany({
      where: {
        code: {
          in: ['WOOD_PINE_BOARD', 'WOOD_OAK_BOARD', 'SCREW_WOOD', 'CARPENTRY_WORK', 'ASSEMBLY_WORK', 'SURFACE_TREATMENT']
        }
      }
    })

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ BOM —à–∞–±–ª–æ–Ω
    const bomItems = [
      {
        resourceCode: 'WOOD_PINE_BOARD',
        quantityFormula: 'wood_volume * wood_modifier * (WOOD_TYPE === "pine" ? 1 : 0)',
        quantityUnit: '–º¬≥',
        groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        includeCondition: 'WOOD_TYPE === "pine"',
        sortOrder: 10
      },
      {
        resourceCode: 'WOOD_OAK_BOARD', 
        quantityFormula: 'wood_volume * wood_modifier * (WOOD_TYPE === "oak" ? 1 : 0)',
        quantityUnit: '–º¬≥',
        groupName: '–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        includeCondition: 'WOOD_TYPE === "oak"',
        sortOrder: 11
      },
      {
        resourceCode: 'SCREW_WOOD',
        quantityFormula: 'STEPS_COUNT * 8 + (HAS_HANDRAIL ? 20 : 0)',
        quantityUnit: '—à—Ç',
        groupName: '–ö—Ä–µ–ø–µ–∂',
        sortOrder: 20
      },
      {
        resourceCode: 'CARPENTRY_WORK',
        quantityFormula: 'production_time * QUANTITY',
        quantityUnit: '—á–∞—Å',
        groupName: '–†–∞–±–æ—Ç—ã',
        sortOrder: 30
      },
      {
        resourceCode: 'ASSEMBLY_WORK',
        quantityFormula: '2 * QUANTITY',
        quantityUnit: '—á–∞—Å',
        groupName: '–†–∞–±–æ—Ç—ã',
        sortOrder: 31
      },
      {
        resourceCode: 'SURFACE_TREATMENT',
        quantityFormula: 'LENGTH * WIDTH / 1000000 * 2 * QUANTITY',
        quantityUnit: '–º¬≤',
        groupName: '–£—Å–ª—É–≥–∏',
        includeCondition: 'HAS_COATING === true',
        isOptional: true,
        sortOrder: 40
      }
    ]

    for (const bomData of bomItems) {
      const resource = resources.find(r => r.code === bomData.resourceCode)
      if (resource) {
        const bomItem = await prisma.bomTemplateItem.create({
          data: {
            bomTemplateId: bomTemplate.id,
            resourceId: resource.id,
            quantityFormula: bomData.quantityFormula,
            quantityUnit: bomData.quantityUnit,
            groupName: bomData.groupName,
            includeCondition: bomData.includeCondition,
            isOptional: bomData.isOptional || false,
            sortOrder: bomData.sortOrder
          }
        })
        console.log(`  ‚úÖ BOM —ç–ª–µ–º–µ–Ω—Ç: ${resource.name}`)
      }
    }

    console.log('üéâ –®–∞–±–ª–æ–Ω "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const fullTemplate = await prisma.template.findUnique({
      where: { id: template.id },
      include: {
        parameters: {
          include: { parameter: true },
          orderBy: { sortOrder: 'asc' }
        },
        formulas: {
          include: { formula: true },
          orderBy: { executionOrder: 'asc' }
        },
        bomTemplate: {
          include: {
            items: {
              include: { resource: true },
              orderBy: { sortOrder: 'asc' }
            }
          }
        }
      }
    })

    console.log(`üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —à–∞–±–ª–æ–Ω–∞:`)
    console.log(`  - –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${fullTemplate.parameters.length}`)
    console.log(`  - –§–æ—Ä–º—É–ª: ${fullTemplate.formulas.length}`)
    console.log(`  - BOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${fullTemplate.bomTemplate.items.length}`)
    console.log(`\nüè∑Ô∏è  ID —à–∞–±–ª–æ–Ω–∞: ${template.id}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error)
  }
}

async function main() {
  await createLadderTemplate()
  await prisma.$disconnect()
}

main().catch((e) => {
  console.error(e)
  process.exit(1)
})

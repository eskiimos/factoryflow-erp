const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function debugFormulas() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü—ã
    const template = await prisma.template.findFirst({
      where: { name: '–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞' },
      include: {
        formulas: {
          include: {
            formula: true
          },
          orderBy: { executionOrder: 'asc' }
        }
      }
    })

    if (!template) {
      console.log('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    console.log('üìã –§–æ—Ä–º—É–ª—ã –≤ —à–∞–±–ª–æ–Ω–µ:')
    template.formulas.forEach(tf => {
      console.log(`${tf.executionOrder}. ${tf.formula.code}: ${tf.formula.expression}`)
      console.log(`   –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${tf.formula.inputParameters}`)
      console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${tf.formula.outputVariable}\n`)
    })

    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–ø–µ–Ω–µ–π
    const stepsFormula = await prisma.formula.findUnique({
      where: { code: 'CALC_STEPS_AUTO' }
    })

    if (stepsFormula) {
      console.log('üîç –§–æ—Ä–º—É–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–ø–µ–Ω–µ–π:')
      console.log(`Expression: ${stepsFormula.expression}`)
      console.log(`Input params: ${stepsFormula.inputParameters}`)
      console.log(`Output var: ${stepsFormula.outputVariable}`)
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
      const HEIGHT = 2500
      const result = Math.ceil(HEIGHT / 280)
      console.log(`–†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç: Math.ceil(${HEIGHT} / 280) = ${result}`)
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

debugFormulas()

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function seedMeasurementUnits() {
  console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è...')

  const units = [
    // –î–ª–∏–Ω–∞
    { name: '–ú–∏–ª–ª–∏–º–µ—Ç—Ä', symbol: '–º–º', type: 'length', baseUnit: '–º', conversionFactor: 0.001 },
    { name: '–°–∞–Ω—Ç–∏–º–µ—Ç—Ä', symbol: '—Å–º', type: 'length', baseUnit: '–º', conversionFactor: 0.01 },
    { name: '–ú–µ—Ç—Ä', symbol: '–º', type: 'length', baseUnit: '–º', conversionFactor: 1.0 },
    
    // –ü–ª–æ—â–∞–¥—å
    { name: '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–∏–ª–ª–∏–º–µ—Ç—Ä', symbol: '–º–º¬≤', type: 'area', baseUnit: '–º¬≤', conversionFactor: 0.000001 },
    { name: '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä', symbol: '—Å–º¬≤', type: 'area', baseUnit: '–º¬≤', conversionFactor: 0.0001 },
    { name: '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä', symbol: '–º¬≤', type: 'area', baseUnit: '–º¬≤', conversionFactor: 1.0 },
    
    // –û–±—ä–µ–º
    { name: '–ö—É–±–∏—á–µ—Å–∫–∏–π –º–∏–ª–ª–∏–º–µ—Ç—Ä', symbol: '–º–º¬≥', type: 'volume', baseUnit: '–º¬≥', conversionFactor: 0.000000001 },
    { name: '–ö—É–±–∏—á–µ—Å–∫–∏–π —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä', symbol: '—Å–º¬≥', type: 'volume', baseUnit: '–º¬≥', conversionFactor: 0.000001 },
    { name: '–õ–∏—Ç—Ä', symbol: '–ª', type: 'volume', baseUnit: '–º¬≥', conversionFactor: 0.001 },
    { name: '–ö—É–±–∏—á–µ—Å–∫–∏–π –º–µ—Ç—Ä', symbol: '–º¬≥', type: 'volume', baseUnit: '–º¬≥', conversionFactor: 1.0 },
    
    // –í–µ—Å
    { name: '–ì—Ä–∞–º–º', symbol: '–≥', type: 'weight', baseUnit: '–∫–≥', conversionFactor: 0.001 },
    { name: '–ö–∏–ª–æ–≥—Ä–∞–º–º', symbol: '–∫–≥', type: 'weight', baseUnit: '–∫–≥', conversionFactor: 1.0 },
    { name: '–¢–æ–Ω–Ω–∞', symbol: '—Ç', type: 'weight', baseUnit: '–∫–≥', conversionFactor: 1000.0 },
    
    // –°—á–µ—Ç–Ω—ã–µ
    { name: '–®—Ç—É–∫–∞', symbol: '—à—Ç', type: 'count', baseUnit: '—à—Ç', conversionFactor: 1.0 },
    { name: '–£–ø–∞–∫–æ–≤–∫–∞', symbol: '—É–ø–∞–∫', type: 'count', baseUnit: '—à—Ç', conversionFactor: 1.0 },
    { name: '–ö–æ–º–ø–ª–µ–∫—Ç', symbol: '–∫–æ–º–ø–ª', type: 'count', baseUnit: '—à—Ç', conversionFactor: 1.0 },
  ]

  for (const unit of units) {
    try {
      await prisma.measurementUnit.upsert({
        where: { name: unit.name },
        update: unit,
        create: unit,
      })
      console.log(`‚úÖ ${unit.name} (${unit.symbol})`)
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ${unit.name}:`, error.message)
    }
  }

  console.log('üéâ –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã!')
}

async function main() {
  try {
    await seedMeasurementUnits()
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ seeding:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

main()

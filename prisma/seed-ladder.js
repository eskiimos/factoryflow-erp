const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function seedLadderProduct() {
  console.log('ü™ú –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞"...')

  try {
    // 1. –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Ç–æ–≤–∞—Ä–æ–≤ "–õ–µ—Å—Ç–Ω–∏—Ü—ã"
    const ladderGroup = await prisma.productGroup.upsert({
      where: { name: '–õ–µ—Å—Ç–Ω–∏—Ü—ã' },
      update: {},
      create: {
        name: '–õ–µ—Å—Ç–Ω–∏—Ü—ã',
        description: '–†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –ª–µ—Å—Ç–Ω–∏—Ü',
        isActive: true
      }
    })
    console.log('‚úÖ –ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤ "–õ–µ—Å—Ç–Ω–∏—Ü—ã" —Å–æ–∑–¥–∞–Ω–∞')

    // 2. –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥—Ä—É–ø–ø—É "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –ª–µ—Å—Ç–Ω–∏—Ü—ã"
    const woodenLaddersSubgroup = await prisma.productSubgroup.upsert({
      where: { 
        groupId_name: {
          groupId: ladderGroup.id,
          name: '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –ª–µ—Å—Ç–Ω–∏—Ü—ã'
        }
      },
      update: {},
      create: {
        name: '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –ª–µ—Å—Ç–Ω–∏—Ü—ã',
        description: '–õ–µ—Å—Ç–Ω–∏—Ü—ã –∏–∑ –¥–µ—Ä–µ–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ—Ä–æ–¥',
        groupId: ladderGroup.id,
        isActive: true
      }
    })
    console.log('‚úÖ –ü–æ–¥–≥—Ä—É–ø–ø–∞ "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –ª–µ—Å—Ç–Ω–∏—Ü—ã" —Å–æ–∑–¥–∞–Ω–∞')

    // 3. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const woodCategory = await prisma.category.upsert({
      where: { name: '–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã' },
      update: {},
      create: {
        name: '–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        description: '–î–æ—Å–∫–∏, –±—Ä—É—Å, —Ä–µ–π–∫–∏ –∏ –ø—Ä–æ—á–∏–µ –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        isActive: true
      }
    })

    const hardwareCategory = await prisma.category.upsert({
      where: { name: '–ö—Ä–µ–ø–µ–∂ –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞' },
      update: {},
      create: {
        name: '–ö—Ä–µ–ø–µ–∂ –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞',
        description: '–°–∞–º–æ—Ä–µ–∑—ã, –±–æ–ª—Ç—ã, –ø–µ—Ç–ª–∏ –∏ –ø—Ä–æ—á–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞',
        isActive: true
      }
    })

    const finishCategory = await prisma.category.upsert({
      where: { name: '–õ–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' },
      update: {},
      create: {
        name: '–õ–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        description: '–õ–∞–∫–∏, –∫—Ä–∞—Å–∫–∏, –ø—Ä–æ–ø–∏—Ç–∫–∏',
        isActive: true
      }
    })
    console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω—ã')

    // 4. –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    const materials = [
      {
        name: '–î–æ—Å–∫–∞ —Å–æ—Å–Ω–æ–≤–∞—è 40x200x6000',
        unit: '—à—Ç',
        price: 850.00,
        currency: 'RUB',
        categoryId: woodCategory.id,
        currentStock: 150,
        criticalMinimum: 20,
        satisfactoryLevel: 50
      },
      {
        name: '–ë—Ä—É—Å —Å–æ—Å–Ω–æ–≤—ã–π 50x50x3000',
        unit: '—à—Ç', 
        price: 320.00,
        currency: 'RUB',
        categoryId: woodCategory.id,
        currentStock: 200,
        criticalMinimum: 30,
        satisfactoryLevel: 70
      },
      {
        name: '–°–∞–º–æ—Ä–µ–∑—ã –ø–æ –¥–µ—Ä–µ–≤—É 4x50–º–º',
        unit: '—É–ø–∞–∫',
        price: 45.00,
        currency: 'RUB',
        categoryId: hardwareCategory.id,
        currentStock: 50,
        criticalMinimum: 5,
        satisfactoryLevel: 15
      },
      {
        name: '–õ–∞–∫ –ø–∞—Ä–∫–µ—Ç–Ω—ã–π –ø–æ–ª–∏—É—Ä–µ—Ç–∞–Ω–æ–≤—ã–π',
        unit: '–ª',
        price: 1200.00,
        currency: 'RUB',
        categoryId: finishCategory.id,
        currentStock: 25,
        criticalMinimum: 3,
        satisfactoryLevel: 10
      },
      {
        name: '–ü–µ—Ç–ª–∏ –¥–ª—è –ª–µ—Å—Ç–Ω–∏—Ü',
        unit: '—à—Ç',
        price: 350.00,
        currency: 'RUB',
        categoryId: hardwareCategory.id,
        currentStock: 40,
        criticalMinimum: 5,
        satisfactoryLevel: 15
      }
    ]

    const createdMaterials = []
    for (const material of materials) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª
      let created = await prisma.materialItem.findFirst({
        where: { name: material.name }
      })
      
      if (!created) {
        created = await prisma.materialItem.create({
          data: material
        })
      }
      createdMaterials.push(created)
    }
    console.log('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ–∑–¥–∞–Ω—ã')

    // 5. –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—ã
    const departments = [
      { name: '–°—Ç–æ–ª—è—Ä–Ω—ã–π —Ü–µ—Ö', description: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π' },
      { name: '–û—Ç–¥–µ–ª–æ—á–Ω—ã–π —Ü–µ—Ö', description: '–û–∫—Ä–∞—Å–∫–∞ –∏ –ª–∞–∫–∏—Ä–æ–≤–∫–∞ –∏–∑–¥–µ–ª–∏–π' },
      { name: '–°–±–æ—Ä–æ—á–Ω—ã–π —Ü–µ—Ö', description: '–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∏–∑–¥–µ–ª–∏–π' }
    ]

    const createdDepartments = []
    for (const dept of departments) {
      let created = await prisma.department.findFirst({
        where: { name: dept.name }
      })
      
      if (!created) {
        created = await prisma.department.create({
          data: dept
        })
      }
      createdDepartments.push(created)
    }
    console.log('‚úÖ –û—Ç–¥–µ–ª—ã —Å–æ–∑–¥–∞–Ω—ã')

    // 6. –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    const employees = [
      {
        personnelNumber: 'EMP001',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        position: '–°—Ç–æ–ª—è—Ä',
        skillLevel: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
        departmentId: createdDepartments[0].id, // –°—Ç–æ–ª—è—Ä–Ω—ã–π —Ü–µ—Ö
        hourlyRate: 650.00,
        hireDate: new Date('2023-01-15'),
        isActive: true
      },
      {
        personnelNumber: 'EMP002',
        firstName: '–°–µ—Ä–≥–µ–π',
        lastName: '–í–æ–ª–∫–æ–≤',
        position: '–ú–∞–ª—è—Ä',
        skillLevel: '–†–∞–±–æ—á–∏–π',
        departmentId: createdDepartments[1].id, // –û—Ç–¥–µ–ª–æ—á–Ω—ã–π —Ü–µ—Ö
        hourlyRate: 580.00,
        hireDate: new Date('2023-03-10'),
        isActive: true
      },
      {
        personnelNumber: 'EMP003',
        firstName: '–ú–∏—Ö–∞–∏–ª',
        lastName: '–ö–æ–∑–ª–æ–≤',
        position: '–°–±–æ—Ä—â–∏–∫',
        skillLevel: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
        departmentId: createdDepartments[2].id, // –°–±–æ—Ä–æ—á–Ω—ã–π —Ü–µ—Ö
        hourlyRate: 620.00,
        hireDate: new Date('2022-11-05'),
        isActive: true
      }
    ]

    const createdEmployees = []
    for (const emp of employees) {
      let created = await prisma.employee.findFirst({
        where: { personnelNumber: emp.personnelNumber }
      })
      
      if (!created) {
        created = await prisma.employee.create({
          data: emp
        })
      }
      createdEmployees.push(created)
    }
    console.log('‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã')

    // 7. –°–æ–∑–¥–∞–µ–º –≤–∏–¥—ã —Ä–∞–±–æ—Ç
    const workTypes = [
      {
        name: '–†–∞—Å–ø–∏–ª–æ–≤–∫–∞ –¥–æ—Å–æ–∫',
        description: '–†–∞—Å–ø–∏–ª–æ–≤–∫–∞ –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º',
        unit: '—á–∞—Å',
        standardTime: 1.0,
        hourlyRate: 650.00,
        skillLevel: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
        departmentId: createdDepartments[0].id,
        isActive: true
      },
      {
        name: '–°—Ç—Ä–æ–≥–∞–Ω–∏–µ –∏ —à–ª–∏—Ñ–æ–≤–∫–∞',
        description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã',
        unit: '—á–∞—Å',
        standardTime: 1.5,
        hourlyRate: 650.00,
        skillLevel: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
        departmentId: createdDepartments[0].id,
        isActive: true
      },
      {
        name: '–õ–∞–∫–∏—Ä–æ–≤–∫–∞ –∏–∑–¥–µ–ª–∏–π',
        description: '–ü–æ–∫—Ä—ã—Ç–∏–µ –ª–∞–∫–æ–º –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π',
        unit: '—á–∞—Å',
        standardTime: 0.5,
        hourlyRate: 580.00,
        skillLevel: '–†–∞–±–æ—á–∏–π',
        departmentId: createdDepartments[1].id,
        isActive: true
      },
      {
        name: '–°–±–æ—Ä–∫–∞ –ª–µ—Å—Ç–Ω–∏—Ü—ã',
        description: '–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –ª–µ—Å—Ç–Ω–∏—á–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
        unit: '—á–∞—Å',
        standardTime: 2.0,
        hourlyRate: 620.00,
        skillLevel: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
        departmentId: createdDepartments[2].id,
        isActive: true
      },
      {
        name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã',
        description: '–ú–æ–Ω—Ç–∞–∂ –ø–µ—Ç–µ–ª—å –∏ –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
        unit: '—á–∞—Å',
        standardTime: 1.0,
        hourlyRate: 620.00,
        skillLevel: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
        departmentId: createdDepartments[2].id,
        isActive: true
      }
    ]

    const createdWorkTypes = []
    for (const workType of workTypes) {
      let created = await prisma.workType.findFirst({
        where: { name: workType.name }
      })
      
      if (!created) {
        created = await prisma.workType.create({
          data: workType
        })
      }
      createdWorkTypes.push(created)
    }
    console.log('‚úÖ –í–∏–¥—ã —Ä–∞–±–æ—Ç —Å–æ–∑–¥–∞–Ω—ã')

    // 8. –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞"
    const ladderProduct = await prisma.product.upsert({
      where: { sku: 'LADDER-WOOD-001' },
      update: {},
      create: {
        name: '–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞ "–ö–ª–∞—Å—Å–∏–∫"',
        description: '–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞ –∏–∑ —Å–æ—Å–Ω—ã —Å –ª–∞–∫–æ–≤—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º, –≤—ã—Å–æ—Ç–∞ 2.5–º',
        sku: 'LADDER-WOOD-001',
        unit: '—à—Ç',
        
        // –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–µ–π)
        materialCost: 0,
        laborCost: 0,
        overheadCost: 500, // –ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        totalCost: 0,
        
        // –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        sellingPrice: 15000,
        margin: 25, // 25% –º–∞—Ä–∂–∞
        currency: 'RUB',
        
        productionTime: 8.5, // 8.5 —á–∞—Å–æ–≤ –Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
        
        // –°–∫–ª–∞–¥—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        currentStock: 5,
        minStock: 2,
        maxStock: 15,
        
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        tags: JSON.stringify(['–ª–µ—Å—Ç–Ω–∏—Ü–∞', '–¥–µ—Ä–µ–≤–æ', '—Å–æ—Å–Ω–∞', '–∫–ª–∞—Å—Å–∏–∫']),
        specifications: JSON.stringify({
          '–í—ã—Å–æ—Ç–∞': '2.5 –º',
          '–ú–∞—Ç–µ—Ä–∏–∞–ª': '–°–æ—Å–Ω–∞',
          '–ü–æ–∫—Ä—ã—Ç–∏–µ': '–õ–∞–∫ –ø–æ–ª–∏—É—Ä–µ—Ç–∞–Ω–æ–≤—ã–π',
          '–®–∏—Ä–∏–Ω–∞ —Å—Ç—É–ø–µ–Ω–∏': '25 —Å–º',
          '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–ø–µ–Ω–µ–π': 10,
          '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞': '120 –∫–≥'
        }),
        
        groupId: ladderGroup.id,
        subgroupId: woodenLaddersSubgroup.id,
        isActive: true
      }
    })
    console.log('‚úÖ –¢–æ–≤–∞—Ä "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞" —Å–æ–∑–¥–∞–Ω')

    // 9. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–æ–º (—Ä–µ—Ü–µ–ø—Ç—É—Ä–∞)
    const materialUsages = [
      { materialId: createdMaterials[0].id, quantity: 8, cost: 6800 }, // –î–æ—Å–∫–∏ —Å–æ—Å–Ω–æ–≤—ã–µ
      { materialId: createdMaterials[1].id, quantity: 4, cost: 1280 }, // –ë—Ä—É—Å
      { materialId: createdMaterials[2].id, quantity: 2, cost: 90 },   // –°–∞–º–æ—Ä–µ–∑—ã
      { materialId: createdMaterials[3].id, quantity: 1.5, cost: 1800 }, // –õ–∞–∫
      { materialId: createdMaterials[4].id, quantity: 6, cost: 2100 }  // –ü–µ—Ç–ª–∏
    ]

    for (const usage of materialUsages) {
      await prisma.productMaterialUsage.upsert({
        where: {
          productId_materialItemId: {
            productId: ladderProduct.id,
            materialItemId: usage.materialId
          }
        },
        update: {
          quantity: usage.quantity,
          cost: usage.cost
        },
        create: {
          productId: ladderProduct.id,
          materialItemId: usage.materialId,
          quantity: usage.quantity,
          cost: usage.cost
        }
      })
    }
    console.log('‚úÖ –°–≤—è–∑–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–æ–º —Å–æ–∑–¥–∞–Ω—ã')

    // 10. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç —Å —Ç–æ–≤–∞—Ä–æ–º (—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å)
    const workTypeUsages = [
      { workTypeId: createdWorkTypes[0].id, quantity: 2.5, cost: 1625, sequence: 1 }, // –†–∞—Å–ø–∏–ª–æ–≤–∫–∞
      { workTypeId: createdWorkTypes[1].id, quantity: 3.0, cost: 1950, sequence: 2 }, // –°—Ç—Ä–æ–≥–∞–Ω–∏–µ
      { workTypeId: createdWorkTypes[4].id, quantity: 1.0, cost: 620, sequence: 3 },  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
      { workTypeId: createdWorkTypes[3].id, quantity: 1.5, cost: 930, sequence: 4 },  // –°–±–æ—Ä–∫–∞
      { workTypeId: createdWorkTypes[2].id, quantity: 0.5, cost: 290, sequence: 5 }   // –õ–∞–∫–∏—Ä–æ–≤–∫–∞
    ]

    for (const usage of workTypeUsages) {
      await prisma.productWorkTypeUsage.upsert({
        where: {
          productId_workTypeId: {
            productId: ladderProduct.id,
            workTypeId: usage.workTypeId
          }
        },
        update: {
          quantity: usage.quantity,
          cost: usage.cost,
          sequence: usage.sequence
        },
        create: {
          productId: ladderProduct.id,
          workTypeId: usage.workTypeId,
          quantity: usage.quantity,
          cost: usage.cost,
          sequence: usage.sequence
        }
      })
    }
    console.log('‚úÖ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω')

    // 11. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
    const totalMaterialCost = materialUsages.reduce((sum, usage) => sum + usage.cost, 0)
    const totalLaborCost = workTypeUsages.reduce((sum, usage) => sum + usage.cost, 0)
    const totalCost = totalMaterialCost + totalLaborCost + 500 // + –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã

    await prisma.product.update({
      where: { id: ladderProduct.id },
      data: {
        materialCost: totalMaterialCost,
        laborCost: totalLaborCost,
        totalCost: totalCost
      }
    })

    console.log('üéâ –ì–æ—Ç–æ–≤–æ! –¢–æ–≤–∞—Ä "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞" –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–Ω —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑—è–º–∏!')
    console.log(`
üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:
‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${totalMaterialCost} —Ä—É–±
‚Ä¢ –†–∞–±–æ—Ç—ã: ${totalLaborCost} —Ä—É–±  
‚Ä¢ –ù–∞–∫–ª–∞–¥–Ω—ã–µ: 500 —Ä—É–±
‚Ä¢ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalCost} —Ä—É–±
‚Ä¢ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: 15000 —Ä—É–±
‚Ä¢ –ú–∞—Ä–∂–∞: ${((15000 - totalCost) / 15000 * 100).toFixed(1)}%
    `)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
  } finally {
    await prisma.$disconnect()
  }
}

seedLadderProduct()

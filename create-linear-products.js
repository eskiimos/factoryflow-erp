const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function createLinearProducts() {
  try {
    console.log('üìè –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–∞—Å—á–µ—Ç–æ–º –∑–∞ —Å–º –∏–∑–¥–µ–ª–∏—è...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Ç–æ–≤–∞—Ä–æ–≤
    const productGroup = await ensureProductGroup()
    console.log(`‚úÖ –ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤: ${productGroup.name}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    const materials = await ensureLinearMaterials()
    console.log(`‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: ${materials.length}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã —Ä–∞–±–æ—Ç
    const workTypes = await ensureLinearWorkTypes()
    console.log(`‚úÖ –¢–∏–ø—ã —Ä–∞–±–æ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: ${workTypes.length}`)

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ä–∞—Å—á–µ—Ç–æ–º –∑–∞ —Å–º
    const products = await createLinearProductsData(productGroup.id, materials, workTypes)
    console.log(`‚úÖ –¢–æ–≤–∞—Ä—ã —Å–æ–∑–¥–∞–Ω—ã: ${products.length}`)

    console.log('üéâ –¢–æ–≤–∞—Ä—ã —Å —Ä–∞—Å—á–µ—Ç–æ–º –∑–∞ —Å–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!')
    console.log('üîó –û—Ç–∫—Ä–æ–π—Ç–µ /products –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞')
    
    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:')
    products.forEach(product => {
      console.log(`- ${product.name} (${product.baseUnit}) - ${product.basePrice} ‚ÇΩ/${product.baseUnit}`)
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error)
  } finally {
    await prisma.$disconnect()
  }
}

async function ensureProductGroup() {
  let group = await prisma.productGroup.findFirst({
    where: { name: '–ü–æ–≥–æ–Ω–∞–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è' }
  })
  
  if (!group) {
    group = await prisma.productGroup.create({
      data: {
        name: '–ü–æ–≥–æ–Ω–∞–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
        description: '–ò–∑–¥–µ–ª–∏—è —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ –ø–æ–≥–æ–Ω–Ω—ã–π –º–µ—Ç—Ä/—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä',
        isActive: true
      }
    })
  }
  
  return group
}

async function ensureLinearMaterials() {
  const materialsData = [
    {
      name: '–ü—Ä–æ—Ñ–∏–ª—å –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–π 20x20–º–º',
      unit: '–ø–æ–≥.–º',
      price: 120,
      isActive: true,
      baseUnit: '–ø–æ–≥.–º',
      calculationUnit: '—Å–º',
      conversionFactor: 0.01
    },
    {
      name: '–ü—Ä–æ—Ñ–∏–ª—å –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–π 40x40–º–º',
      unit: '–ø–æ–≥.–º',
      price: 280,
      isActive: true,
      baseUnit: '–ø–æ–≥.–º',
      calculationUnit: '—Å–º',
      conversionFactor: 0.01
    },
    {
      name: '–¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è √ò25–º–º',
      unit: '–ø–æ–≥.–º',
      price: 95,
      isActive: true,
      baseUnit: '–ø–æ–≥.–º',
      calculationUnit: '—Å–º',
      conversionFactor: 0.01
    },
    {
      name: '–¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è √ò40–º–º',
      unit: '–ø–æ–≥.–º',
      price: 180,
      isActive: true,
      baseUnit: '–ø–æ–≥.–º',
      calculationUnit: '—Å–º',
      conversionFactor: 0.01
    },
    {
      name: '–ü–ª–∏–Ω—Ç—É—Å MDF 60–º–º',
      unit: '–ø–æ–≥.–º',
      price: 85,
      isActive: true,
      baseUnit: '–ø–æ–≥.–º',
      calculationUnit: '—Å–º',
      conversionFactor: 0.01
    },
    {
      name: '–ú–æ–ª–¥–∏–Ω–≥ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π 30–º–º',
      unit: '–ø–æ–≥.–º',
      price: 125,
      isActive: true,
      baseUnit: '–ø–æ–≥.–º',
      calculationUnit: '—Å–º',
      conversionFactor: 0.01
    },
    {
      name: '–ö–∞–±–µ–ª—å-–∫–∞–Ω–∞–ª 40x25–º–º',
      unit: '–ø–æ–≥.–º',
      price: 65,
      isActive: true,
      baseUnit: '–ø–æ–≥.–º',
      calculationUnit: '—Å–º',
      conversionFactor: 0.01
    },
    {
      name: '–£–≥–æ–ª–æ–∫ –∫—Ä–µ–ø–µ–∂–Ω—ã–π',
      unit: '—à—Ç',
      price: 15,
      isActive: true,
      baseUnit: '—à—Ç'
    },
    {
      name: '–°–∞–º–æ—Ä–µ–∑ 4x16–º–º',
      unit: '—à—Ç',
      price: 2.5,
      isActive: true,
      baseUnit: '—à—Ç'
    },
    {
      name: '–ó–∞–≥–ª—É—à–∫–∞ —Ç–æ—Ä—Ü–µ–≤–∞—è',
      unit: '—à—Ç',
      price: 8,
      isActive: true,
      baseUnit: '—à—Ç'
    }
  ]

  const materials = []
  for (const materialData of materialsData) {
    let material = await prisma.materialItem.findFirst({
      where: { name: materialData.name }
    })
    
    if (!material) {
      material = await prisma.materialItem.create({
        data: materialData
      })
    }
    materials.push(material)
  }

  return materials
}

async function ensureLinearWorkTypes() {
  const workTypesData = [
    {
      name: '–†–µ–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è',
      description: '–†–µ–∑–∫–∞ –∞–ª—é–º–∏–Ω–∏–µ–≤–æ–≥–æ –∏–ª–∏ —Å—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è',
      unit: '—á–∞—Å',
      standardTime: 1.0,
      hourlyRate: 600,
      skillLevel: '–†–∞–±–æ—á–∏–π',
      calculationUnit: '—Å–º',
      productivityRate: 50, // —Å–º –≤ —á–∞—Å
      isActive: true
    },
    {
      name: '–°–±–æ—Ä–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
      description: '–°–±–æ—Ä–∫–∞ –ø–æ–≥–æ–Ω–∞–∂–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
      unit: '—á–∞—Å',
      standardTime: 1.0,
      hourlyRate: 800,
      skillLevel: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
      calculationUnit: '—Å–º',
      productivityRate: 30, // —Å–º –≤ —á–∞—Å
      isActive: true
    },
    {
      name: '–ó–∞—á–∏—Å—Ç–∫–∞ —Ç–æ—Ä—Ü–æ–≤',
      description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä—Ü–µ–≤—ã—Ö —á–∞—Å—Ç–µ–π',
      unit: '—á–∞—Å',
      standardTime: 1.0,
      hourlyRate: 500,
      skillLevel: '–†–∞–±–æ—á–∏–π',
      calculationUnit: '—à—Ç',
      productivityRate: 20, // —à—Ç –≤ —á–∞—Å
      isActive: true
    },
    {
      name: '–ú–æ–Ω—Ç–∞–∂ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã',
      description: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
      unit: '—á–∞—Å',
      standardTime: 1.0,
      hourlyRate: 700,
      skillLevel: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
      calculationUnit: '—à—Ç',
      productivityRate: 15, // —à—Ç –≤ —á–∞—Å
      isActive: true
    }
  ]

  const workTypes = []
  for (const workTypeData of workTypesData) {
    let workType = await prisma.workType.findFirst({
      where: { name: workTypeData.name }
    })
    
    if (!workType) {
      workType = await prisma.workType.create({
        data: workTypeData
      })
    }
    workTypes.push(workType)
  }

  return workTypes
}

async function createLinearProductsData(groupId, materials, workTypes) {
  const productsData = [
    {
      name: '–ö–∞—Ä–∫–∞—Å –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–π 20x20',
      description: '–ê–ª—é–º–∏–Ω–∏–µ–≤—ã–π –∫–∞—Ä–∫–∞—Å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è 20x20–º–º —Å –∫—Ä–µ–ø–ª–µ–Ω–∏—è–º–∏',
      sku: 'FRAME-AL-20x20',
      unit: '—Å–º',
      type: 'FINAL',
      pricingMethod: 'LINEAR',
      baseUnit: '—Å–º',
      basePrice: 3.50, // –∑–∞ —Å–º
      currency: 'RUB',
      isActive: true,
      groupId: groupId,
      specifications: JSON.stringify({
        profileSize: '20x20–º–º',
        material: '–ê–ª—é–º–∏–Ω–∏–π',
        finish: '–ê–Ω–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
        maxLength: '600—Å–º'
      }),
      materials: [
        { materialName: '–ü—Ä–æ—Ñ–∏–ª—å –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–π 20x20–º–º', usagePerCm: 1.0 },
        { materialName: '–£–≥–æ–ª–æ–∫ –∫—Ä–µ–ø–µ–∂–Ω—ã–π', usagePerCm: 0.1 },
        { materialName: '–°–∞–º–æ—Ä–µ–∑ 4x16–º–º', usagePerCm: 0.2 }
      ],
      workTypes: [
        { workTypeName: '–†–µ–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è', timePerCm: 0.02 },
        { workTypeName: '–°–±–æ—Ä–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', timePerCm: 0.033 },
        { workTypeName: '–ú–æ–Ω—Ç–∞–∂ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã', timePerCm: 0.01 }
      ]
    },
    {
      name: '–ö–∞—Ä–∫–∞—Å –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–π 40x40',
      description: '–£—Å–∏–ª–µ–Ω–Ω—ã–π –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–π –∫–∞—Ä–∫–∞—Å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è 40x40–º–º',
      sku: 'FRAME-AL-40x40',
      unit: '—Å–º',
      type: 'FINAL',
      pricingMethod: 'LINEAR',
      baseUnit: '—Å–º',
      basePrice: 6.20, // –∑–∞ —Å–º
      currency: 'RUB',
      isActive: true,
      groupId: groupId,
      specifications: JSON.stringify({
        profileSize: '40x40–º–º',
        material: '–ê–ª—é–º–∏–Ω–∏–π',
        finish: '–ê–Ω–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
        maxLength: '600—Å–º',
        loadCapacity: '50–∫–≥/–º'
      }),
      materials: [
        { materialName: '–ü—Ä–æ—Ñ–∏–ª—å –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–π 40x40–º–º', usagePerCm: 1.0 },
        { materialName: '–£–≥–æ–ª–æ–∫ –∫—Ä–µ–ø–µ–∂–Ω—ã–π', usagePerCm: 0.15 },
        { materialName: '–°–∞–º–æ—Ä–µ–∑ 4x16–º–º', usagePerCm: 0.3 }
      ],
      workTypes: [
        { workTypeName: '–†–µ–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è', timePerCm: 0.025 },
        { workTypeName: '–°–±–æ—Ä–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', timePerCm: 0.04 },
        { workTypeName: '–ú–æ–Ω—Ç–∞–∂ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã', timePerCm: 0.015 }
      ]
    },
    {
      name: '–¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è √ò25',
      description: '–°—Ç–∞–ª—å–Ω–∞—è —Ç—Ä—É–±–∞ –¥–∏–∞–º–µ—Ç—Ä–æ–º 25–º–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–æ—Ä—Ü–æ–≤',
      sku: 'PIPE-ST-25',
      unit: '—Å–º',
      type: 'FINAL',
      pricingMethod: 'LINEAR',
      baseUnit: '—Å–º',
      basePrice: 2.80, // –∑–∞ —Å–º
      currency: 'RUB',
      isActive: true,
      groupId: groupId,
      specifications: JSON.stringify({
        diameter: '25–º–º',
        material: '–°—Ç–∞–ª—å',
        wallThickness: '2–º–º',
        maxLength: '600—Å–º'
      }),
      materials: [
        { materialName: '–¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è √ò25–º–º', usagePerCm: 1.0 },
        { materialName: '–ó–∞–≥–ª—É—à–∫–∞ —Ç–æ—Ä—Ü–µ–≤–∞—è', usagePerCm: 0.033 }
      ],
      workTypes: [
        { workTypeName: '–†–µ–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è', timePerCm: 0.015 },
        { workTypeName: '–ó–∞—á–∏—Å—Ç–∫–∞ —Ç–æ—Ä—Ü–æ–≤', timePerCm: 0.05 }
      ]
    },
    {
      name: '–¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è √ò40',
      description: '–£—Å–∏–ª–µ–Ω–Ω–∞—è —Å—Ç–∞–ª—å–Ω–∞—è —Ç—Ä—É–±–∞ –¥–∏–∞–º–µ—Ç—Ä–æ–º 40–º–º',
      sku: 'PIPE-ST-40',
      unit: '—Å–º',
      type: 'FINAL',
      pricingMethod: 'LINEAR',
      baseUnit: '—Å–º',
      basePrice: 4.50, // –∑–∞ —Å–º
      currency: 'RUB',
      isActive: true,
      groupId: groupId,
      specifications: JSON.stringify({
        diameter: '40–º–º',
        material: '–°—Ç–∞–ª—å',
        wallThickness: '3–º–º',
        maxLength: '600—Å–º',
        loadCapacity: '100–∫–≥/–º'
      }),
      materials: [
        { materialName: '–¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è √ò40–º–º', usagePerCm: 1.0 },
        { materialName: '–ó–∞–≥–ª—É—à–∫–∞ —Ç–æ—Ä—Ü–µ–≤–∞—è', usagePerCm: 0.033 }
      ],
      workTypes: [
        { workTypeName: '–†–µ–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è', timePerCm: 0.02 },
        { workTypeName: '–ó–∞—á–∏—Å—Ç–∫–∞ —Ç–æ—Ä—Ü–æ–≤', timePerCm: 0.06 }
      ]
    },
    {
      name: '–ü–ª–∏–Ω—Ç—É—Å MDF 60–º–º',
      description: '–ü–ª–∏–Ω—Ç—É—Å –∏–∑ MDF –≤—ã—Å–æ—Ç–æ–π 60–º–º —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º',
      sku: 'BASEBOARD-MDF-60',
      unit: '—Å–º',
      type: 'FINAL',
      pricingMethod: 'LINEAR',
      baseUnit: '—Å–º',
      basePrice: 1.20, // –∑–∞ —Å–º
      currency: 'RUB',
      isActive: true,
      groupId: groupId,
      specifications: JSON.stringify({
        height: '60–º–º',
        material: 'MDF',
        finish: '–ë–µ–ª—ã–π',
        maxLength: '240—Å–º'
      }),
      materials: [
        { materialName: '–ü–ª–∏–Ω—Ç—É—Å MDF 60–º–º', usagePerCm: 1.0 }
      ],
      workTypes: [
        { workTypeName: '–†–µ–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è', timePerCm: 0.01 }
      ]
    },
    {
      name: '–ú–æ–ª–¥–∏–Ω–≥ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π 30–º–º',
      description: '–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –º–æ–ª–¥–∏–Ω–≥ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞',
      sku: 'MOLDING-WOOD-30',
      unit: '—Å–º',
      type: 'FINAL',
      pricingMethod: 'LINEAR',
      baseUnit: '—Å–º',
      basePrice: 1.85, // –∑–∞ —Å–º
      currency: 'RUB',
      isActive: true,
      groupId: groupId,
      specifications: JSON.stringify({
        width: '30–º–º',
        material: '–°–æ—Å–Ω–∞',
        finish: '–õ–∞–∫',
        maxLength: '200—Å–º'
      }),
      materials: [
        { materialName: '–ú–æ–ª–¥–∏–Ω–≥ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π 30–º–º', usagePerCm: 1.0 }
      ],
      workTypes: [
        { workTypeName: '–†–µ–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è', timePerCm: 0.012 },
        { workTypeName: '–ó–∞—á–∏—Å—Ç–∫–∞ —Ç–æ—Ä—Ü–æ–≤', timePerCm: 0.02 }
      ]
    },
    {
      name: '–ö–∞–±–µ–ª—å-–∫–∞–Ω–∞–ª 40x25–º–º',
      description: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –∫–∞–±–µ–ª—å-–∫–∞–Ω–∞–ª —Å –∫—Ä—ã—à–∫–æ–π',
      sku: 'CABLE-DUCT-40x25',
      unit: '—Å–º',
      type: 'FINAL',
      pricingMethod: 'LINEAR',
      baseUnit: '—Å–º',
      basePrice: 0.85, // –∑–∞ —Å–º
      currency: 'RUB',
      isActive: true,
      groupId: groupId,
      specifications: JSON.stringify({
        size: '40x25–º–º',
        material: 'PVC',
        color: '–ë–µ–ª—ã–π',
        maxLength: '200—Å–º'
      }),
      materials: [
        { materialName: '–ö–∞–±–µ–ª—å-–∫–∞–Ω–∞–ª 40x25–º–º', usagePerCm: 1.0 }
      ],
      workTypes: [
        { workTypeName: '–†–µ–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è', timePerCm: 0.008 }
      ]
    }
  ]

  const products = []
  for (const productData of productsData) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ä–∞–±–æ—Ç
    const { materials: productMaterials, workTypes: productWorkTypes, ...productInfo } = productData
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä
    let product = await prisma.product.findFirst({
      where: { name: productData.name }
    })
    
    if (!product) {
      product = await prisma.product.create({
        data: productInfo
      })
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      for (const materialUsage of productMaterials) {
        const material = materials.find(m => m.name === materialUsage.materialName)
        if (material) {
          await prisma.productMaterialUsage.create({
            data: {
              productId: product.id,
              materialItemId: material.id,
              quantity: materialUsage.usagePerCm,
              cost: material.price * materialUsage.usagePerCm,
              unitType: 'per_length',
              baseQuantity: materialUsage.usagePerCm,
              calculationFormula: `length * ${materialUsage.usagePerCm}`
            }
          })
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—ã
      for (const workUsage of productWorkTypes) {
        const workType = workTypes.find(w => w.name === workUsage.workTypeName)
        if (workType) {
          await prisma.productWorkTypeUsage.create({
            data: {
              productId: product.id,
              workTypeId: workType.id,
              quantity: workUsage.timePerCm,
              cost: workType.hourlyRate * workUsage.timePerCm,
              unitType: 'per_length',
              baseTime: workUsage.timePerCm,
              calculationFormula: `length * ${workUsage.timePerCm}`
            }
          })
        }
      }
    }
    
    products.push(product)
  }

  return products
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
createLinearProducts()

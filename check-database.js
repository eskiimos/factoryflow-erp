const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkDatabase() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  try {
    const products = await prisma.product.findMany({
      include: {
        subgroup: true
      }
    });

    const materials = await prisma.materialItem.count({ where: { isActive: true } });
    const workTypes = await prisma.workType.count({ where: { isActive: true } });
    const groups = await prisma.productGroup.count({ where: { isActive: true } });
    const subgroups = await prisma.productSubgroup.count({ where: { isActive: true } });

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:`);
    console.log(`   –¢–æ–≤–∞—Ä—ã: ${products.length}`);
    console.log(`   –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${materials}`);
    console.log(`   –í–∏–¥—ã —Ä–∞–±–æ—Ç: ${workTypes}`);
    console.log(`   –ì—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤: ${groups}`);
    console.log(`   –ü–æ–¥–≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤: ${subgroups}`);

    if (products.length > 0) {
      console.log(`\nüì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:`);
      products.forEach(product => {
        console.log(`   ${product.name} (${product.sku}) - ${product.sellingPrice}‚ÇΩ/${product.unit}`);
        console.log(`      –ì—Ä—É–ø–ø–∞: ${product.subgroup?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      });
    } else {
      console.log(`\n‚ùå –¢–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDatabase();

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkDepartments() {
  try {
    console.log('üë• –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—ã...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–¥–µ–ª—ã
    const departments = await prisma.department.findMany({
      include: {
        _count: {
          select: { employees: true }
        }
      }
    });

    if (departments.length === 0) {
      console.log('‚ùó –û—Ç–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç–¥–µ–ª—ã...');
      
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –æ—Ç–¥–µ–ª—ã –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
      const departmentsToCreate = [
        { name: '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', description: '–†—É–∫–æ–≤–æ–¥—è—â–∏–π —Å–æ—Å—Ç–∞–≤ –∫–æ–º–ø–∞–Ω–∏–∏' },
        { name: '–î–∏–∑–∞–π–Ω', description: '–û—Ç–¥–µ–ª –¥–∏–∑–∞–π–Ω–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–∞–∫–µ—Ç–æ–≤' },
        { name: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', description: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª' },
        { name: '–ú–æ–Ω—Ç–∞–∂', description: '–û—Ç–¥–µ–ª –º–æ–Ω—Ç–∞–∂–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏' },
        { name: '–ü—Ä–æ–¥–∞–∂–∏', description: '–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂ –∏ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏' },
        { name: '–§–∏–Ω–∞–Ω—Å—ã', description: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç–¥–µ–ª –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è' },
        { name: '–°–Ω–∞–±–∂–µ–Ω–∏–µ', description: '–û—Ç–¥–µ–ª —Å–Ω–∞–±–∂–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏' },
        { name: '–ü–µ—Ä—Å–æ–Ω–∞–ª', description: '–û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤ –∏ HR' }
      ];

      for (const dept of departmentsToCreate) {
        await prisma.department.create({
          data: dept
        });
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–¥–µ–ª: ${dept.name}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—ã
      const createdDepartments = await prisma.department.findMany();
      console.log(`\nüéâ –°–æ–∑–¥–∞–Ω–æ ${createdDepartments.length} –æ—Ç–¥–µ–ª–æ–≤`);
    } else {
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${departments.length} –æ—Ç–¥–µ–ª–æ–≤:`);
      
      departments.forEach((dept, index) => {
        console.log(`${index + 1}. ${dept.name} - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${dept._count.employees}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${dept.description || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      });
    }

    console.log('\nüìù –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–¥–µ–ª—ã...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–¥–µ–ª—ã
    const allDepartments = await prisma.department.findMany();
    const departmentMap = {};
    
    allDepartments.forEach(dept => {
      departmentMap[dept.name] = dept.id;
    });

    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –æ—Ç–¥–µ–ª–æ–≤
    const employeeToDepartment = [
      { personnelNumber: 'DIR-001', departmentName: '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ' },
      { personnelNumber: 'DSN-001', departmentName: '–î–∏–∑–∞–π–Ω' },
      { personnelNumber: 'PRN-001', departmentName: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' },
      { personnelNumber: 'SAL-001', departmentName: '–ü—Ä–æ–¥–∞–∂–∏' },
      { personnelNumber: 'INS-001', departmentName: '–ú–æ–Ω—Ç–∞–∂' },
      { personnelNumber: 'FIN-001', departmentName: '–§–∏–Ω–∞–Ω—Å—ã' },
      { personnelNumber: 'PRD-002', departmentName: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' },
      { personnelNumber: 'SUP-001', departmentName: '–°–Ω–∞–±–∂–µ–Ω–∏–µ' },
      { personnelNumber: 'QC-001', departmentName: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' },
      { personnelNumber: 'HR-001', departmentName: '–ü–µ—Ä—Å–æ–Ω–∞–ª' }
    ];

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –Ω–∞–∑–Ω–∞—á–∞—è –∏—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–¥–µ–ª—ã
    for (const mapping of employeeToDepartment) {
      const departmentId = departmentMap[mapping.departmentName];
      
      if (!departmentId) {
        console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–¥–µ–ª: ${mapping.departmentName}`);
        continue;
      }

      await prisma.employee.update({
        where: { personnelNumber: mapping.personnelNumber },
        data: { departmentId }
      });

      console.log(`‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${mapping.personnelNumber} –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –æ—Ç–¥–µ–ª "${mapping.departmentName}"`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–¥–µ–ª–∞–º
    const updatedDepartments = await prisma.department.findMany({
      include: {
        _count: {
          select: { employees: true }
        },
        employees: true
      }
    });

    console.log('\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º:');
    updatedDepartments.forEach((dept, index) => {
      console.log(`${index + 1}. ${dept.name} - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${dept._count.employees}`);
      
      if (dept._count.employees > 0) {
        console.log('   –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:');
        dept.employees.forEach(emp => {
          console.log(`   - ${emp.lastName} ${emp.firstName} (${emp.position})`);
        });
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ—Ç–¥–µ–ª–∞–º–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDepartments();

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function deleteAllProducts() {
  try {
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã...');
    
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üîó –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏...');
    const deletedMaterialUsages = await prisma.productMaterialUsage.deleteMany({});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedMaterialUsages.count} —Å–≤—è–∑–µ–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤`);

    console.log('üîó –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏...');
    const deletedWorkTypeUsages = await prisma.productWorkTypeUsage.deleteMany({});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedWorkTypeUsages.count} —Å–≤—è–∑–µ–π –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç`);

    console.log('üîó –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Ñ–æ–Ω–¥–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏...');
    const deletedFundUsages = await prisma.productFundUsage.deleteMany({});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedFundUsages.count} —Å–≤—è–∑–µ–π —Ñ–æ–Ω–¥–æ–≤`);

    console.log(' –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã...');
    const deletedProducts = await prisma.product.deleteMany({});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedProducts.count} —Ç–æ–≤–∞—Ä–æ–≤`);

    console.log('üéâ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

deleteAllProducts();

// –°–∏–º—É–ª—è—Ü–∏—è –∫–ª–∏–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É "–ü–æ–≥–æ–Ω–∞–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è"
const simulateGroupExpansion = async () => {
  console.log('üß™ Simulating group expansion for "–ü–æ–≥–æ–Ω–∞–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è"...');
  
  // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç UI
  const groupsResponse = await fetch('http://localhost:3005/api/product-groups');
  const groupsData = await groupsResponse.json();
  const groups = groupsData.data;
  
  // 2. –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É "–ü–æ–≥–æ–Ω–∞–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è"
  const targetGroup = groups.find(g => g.name === '–ü–æ–≥–æ–Ω–∞–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è');
  if (!targetGroup) {
    console.error('‚ùå Group "–ü–æ–≥–æ–Ω–∞–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è" not found!');
    return;
  }
  
  console.log('üìÇ Found target group:', {
    id: targetGroup.id,
    name: targetGroup.name,
    productsCount: targetGroup._count.products
  });
  
  // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º toggleGroupExpansion
  const groupId = targetGroup.id;
  const isSubgroup = false;
  
  console.log('üîÑ Toggle group expansion:', { groupId, isSubgroup });
  
  // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º fetchGroupProducts (—Ç–∞–∫ –∫–∞–∫ —Ç–æ–≤–∞—Ä—ã –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã)
  console.log('üõí Fetching products for:', { groupId, isSubgroup });
  
  const param = isSubgroup ? 'subgroupId' : 'groupId';
  const url = `http://localhost:3005/api/products?${param}=${groupId}&showAll=true`;
  
  const response = await fetch(url);
  
  if (!response.ok) {
    console.error('‚ùå Failed to fetch products');
    return;
  }
  
  const data = await response.json();
  const products = data.data || data.products || [];
  
  console.log(`‚úÖ Loaded ${products.length} products for group ${groupId}`);
  
  // 5. –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ groupProducts
  const groupProducts = {
    [groupId]: products
  };
  
  console.log(`üìä Simulated groupProducts state:`, groupProducts);
  console.log(`üìä Specifically for group ${groupId}:`, groupProducts[groupId]);
  
  // 6. –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const hasProducts = groupProducts[groupId] && groupProducts[groupId].length > 0;
  const isEmpty = groupProducts[groupId] && groupProducts[groupId].length === 0;
  
  console.log(`üéØ Rendering conditions:`);
  console.log(`   - hasProducts: ${hasProducts}`);
  console.log(`   - isEmpty: ${isEmpty}`);
  console.log(`   - should show products: ${hasProducts}`);
  console.log(`   - should show "no products": ${isEmpty}`);
  
  if (hasProducts) {
    console.log(`üéâ SUCCESS: Should display ${products.length} products`);
    products.slice(0, 3).forEach((product, i) => {
      console.log(`   ${i + 1}. ${product.name} (${product.sku})`);
    });
    if (products.length > 3) {
      console.log(`   ... and ${products.length - 3} more products`);
    }
  } else if (isEmpty) {
    console.log(`üì≠ Would show "–¢–æ–≤–∞—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ—Ç"`);
  } else {
    console.log(`‚è≥ Products not loaded yet or loading`);
  }
};

simulateGroupExpansion().catch(console.error);

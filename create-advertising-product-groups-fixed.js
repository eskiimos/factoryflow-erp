const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function createProductGroupsFixed() {
  console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞...');

  // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
  const productGroups = await Promise.all([
    prisma.productGroup.upsert({
      where: { name: '–ù–∞—Ä—É–∂–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞' },
      update: {},
      create: {
        name: '–ù–∞—Ä—É–∂–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
        description: '–í—ã–≤–µ—Å–∫–∏, –±–∞–Ω–Ω–µ—Ä—ã –∏ –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Ä—É–∂–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è',
        isActive: true
      }
    }),
    prisma.productGroup.upsert({
      where: { name: '–ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞' },
      update: {},
      create: {
        name: '–ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
        description: '–†–µ–∫–ª–∞–º–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –ø–æ–º–µ—â–µ–Ω–∏–π',
        isActive: true
      }
    }),
    prisma.productGroup.upsert({
      where: { name: '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è' },
      update: {},
      create: {
        name: '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è',
        description: '–ü–µ—á–∞—Ç–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –ª—é–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤',
        isActive: true
      }
    }),
    prisma.productGroup.upsert({
      where: { name: '–°—É–≤–µ–Ω–∏—Ä–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è' },
      update: {},
      create: {
        name: '–°—É–≤–µ–Ω–∏—Ä–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è',
        description: '–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–≤–µ–Ω–∏—Ä—ã –∏ –ø–æ–¥–∞—Ä–∫–∏',
        isActive: true
      }
    }),
    prisma.productGroup.upsert({
      where: { name: '–¶–∏—Ñ—Ä–æ–≤—ã–µ —É—Å–ª—É–≥–∏' },
      update: {},
      create: {
        name: '–¶–∏—Ñ—Ä–æ–≤—ã–µ —É—Å–ª—É–≥–∏',
        description: '–î–∏–∑–∞–π–Ω, –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ',
        isActive: true
      }
    }),
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${productGroups.length} –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤`);

  // –§—É–Ω–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–≥—Ä—É–ø–ø—ã
  const createSubgroup = (groupId, name, description) => {
    return prisma.productSubgroup.upsert({
      where: {
        groupId_name: {
          groupId: groupId,
          name: name
        }
      },
      update: {},
      create: {
        name: name,
        description: description,
        groupId: groupId,
        isActive: true
      }
    });
  };

  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã
  const naruzhkaSubgroups = await Promise.all([
    createSubgroup(
      productGroups[0].id,
      '–í—ã–≤–µ—Å–∫–∏',
      '–§–∞—Å–∞–¥–Ω—ã–µ –∏ –∫—Ä—ã—à–Ω—ã–µ –≤—ã–≤–µ—Å–∫–∏'
    ),
    createSubgroup(
      productGroups[0].id,
      '–ë–∞–Ω–Ω–µ—Ä—ã –∏ —Ä–∞—Å—Ç—è–∂–∫–∏',
      '–ë–∞–Ω–Ω–µ—Ä—ã –Ω–∞ —Ñ–∞—Å–∞–¥–∞—Ö –∏ –ø–µ—Ä–µ—Ç—è–∂–∫–∏'
    ),
    createSubgroup(
      productGroups[0].id,
      '–°–≤–µ—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∞',
      '–õ–∞–π—Ç–±–æ–∫—Å—ã —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π'
    ),
    createSubgroup(
      productGroups[0].id,
      '–°—Ç–µ–ª—ã –∏ –ø–∏–ª–æ–Ω—ã',
      '–û—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–æ—è—â–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'
    ),
    createSubgroup(
      productGroups[0].id,
      '–ö—Ä—ã—à–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏',
      '–†–µ–∫–ª–∞–º–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –∫—Ä—ã—à–∞—Ö'
    ),
  ]);

  const interierSubgroups = await Promise.all([
    createSubgroup(
      productGroups[1].id,
      '–¢–∞–±–ª–∏—á–∫–∏ –∏ –≤—ã–≤–µ—Å–∫–∏',
      '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—á–∫–∏ –∏ –≤—ã–≤–µ—Å–∫–∏'
    ),
    createSubgroup(
      productGroups[1].id,
      '–î–µ—Ä–∂–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—á–µ–∫',
      '–°–∏—Å—Ç–µ–º—ã –∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—á–µ–∫'
    ),
    createSubgroup(
      productGroups[1].id,
      '–ù–æ–º–µ—Ä–∫–∏',
      '–ù–æ–º–µ—Ä–∫–∏ –¥–ª—è –≥–∞—Ä–¥–µ—Ä–æ–±–∞, –∫–ª—é—á–µ–π –∏ —Ç.–¥.'
    ),
    createSubgroup(
      productGroups[1].id,
      '–ë–µ–π–¥–∂–∏',
      '–ë–µ–π–¥–∂–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'
    ),
    createSubgroup(
      productGroups[1].id,
      '–î–∏–ø–ª–æ–º—ã –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã',
      '–ù–∞–≥—Ä–∞–¥–Ω—ã–µ –¥–∏–ø–ª–æ–º—ã –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã'
    ),
  ]);

  const polygraphSubgroups = await Promise.all([
    createSubgroup(
      productGroups[2].id,
      '–í–∏–∑–∏—Ç–∫–∏ –∏ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –∫–∞—Ä—Ç—ã',
      '–í–∏–∑–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã'
    ),
    createSubgroup(
      productGroups[2].id,
      '–õ–∏—Å—Ç–æ–≤–∫–∏ –∏ —Ñ–ª–∞–µ—Ä—ã',
      '–†–µ–∫–ª–∞–º–Ω—ã–µ –ª–∏—Å—Ç–æ–≤–∫–∏ –∏ —Ñ–ª–∞–µ—Ä—ã'
    ),
    createSubgroup(
      productGroups[2].id,
      '–ö–∞—Ç–∞–ª–æ–≥–∏ –∏ –±—Ä–æ—à—é—Ä—ã',
      '–ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ –ø–µ—á–∞—Ç–Ω—ã–µ –∏–∑–¥–∞–Ω–∏—è'
    ),
    createSubgroup(
      productGroups[2].id,
      '–ü–ª–∞–∫–∞—Ç—ã –∏ –ø–æ—Å—Ç–µ—Ä—ã',
      '–ö—Ä—É–ø–Ω–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –ø–µ—á–∞—Ç–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è'
    ),
    createSubgroup(
      productGroups[2].id,
      '–ë—É–∫–ª–µ—Ç—ã –∏ –ª–∏—Ñ–ª–µ—Ç—ã',
      '–°–∫–ª–∞–¥–Ω—ã–µ –±—É–∫–ª–µ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ —Ñ–∞–ª—å—Ü–æ–≤–∫–∏'
    ),
  ]);

  const souvenirSubgroups = await Promise.all([
    createSubgroup(
      productGroups[3].id,
      '–†—É—á–∫–∏ –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è',
      '–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É—á–∫–∏ –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏'
    ),
    createSubgroup(
      productGroups[3].id,
      '–¢–µ–∫—Å—Ç–∏–ª—å',
      '–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–¥–µ–∂–¥–∞ –∏ —Ç–µ–∫—Å—Ç–∏–ª—å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è'
    ),
    createSubgroup(
      productGroups[3].id,
      '–ü–æ—Å—É–¥–∞ –∏ –∫—Ä—É–∂–∫–∏',
      '–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—Å—É–¥–∞ –∏ –∫—Ä—É–∂–∫–∏'
    ),
    createSubgroup(
      productGroups[3].id,
      '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
      '–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–∞–¥–∂–µ—Ç—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'
    ),
    createSubgroup(
      productGroups[3].id,
      'VIP-–ø–æ–¥–∞—Ä–∫–∏',
      '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –±—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏'
    ),
  ]);

  const digitalSubgroups = await Promise.all([
    createSubgroup(
      productGroups[4].id,
      '–î–∏–∑–∞–π–Ω —É—Å–ª—É–≥–∏',
      '–£—Å–ª—É–≥–∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞'
    ),
    createSubgroup(
      productGroups[4].id,
      '3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ',
      '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ 3D-–º–æ–¥–µ–ª–µ–π –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π'
    ),
    createSubgroup(
      productGroups[4].id,
      '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π',
      '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π'
    ),
    createSubgroup(
      productGroups[4].id,
      '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã',
      '–£—Å–ª—É–≥–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π'
    ),
    createSubgroup(
      productGroups[4].id,
      '–ë—Ä–µ–Ω–¥–±—É–∫–∏ –∏ –≥–∞–π–¥–ª–∞–π–Ω—ã',
      '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è –∏ –ø—Ä–∞–≤–∏–ª –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
    ),
  ]);

  const allSubgroups = [
    ...naruzhkaSubgroups,
    ...interierSubgroups,
    ...polygraphSubgroups,
    ...souvenirSubgroups,
    ...digitalSubgroups
  ];

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${allSubgroups.length} –ø–æ–¥–≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤`);

  await prisma.$disconnect();
  return {
    groups: productGroups,
    subgroups: allSubgroups
  };
}

if (require.main === module) {
  createProductGroupsFixed()
    .catch((e) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤:', e);
      process.exit(1);
    });
}

module.exports = { createProductGroups: createProductGroupsFixed };

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testProductCreation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤...');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const materials = await prisma.materialItem.findMany({ where: { isActive: true } });
    const workTypes = await prisma.workType.findMany({ where: { isActive: true } });
    const subgroups = await prisma.productSubgroup.findMany({ where: { isActive: true } });
    const categories = await prisma.category.findMany({ where: { isActive: true } });

    console.log(`üìä –î–æ—Å—Ç—É–ø–Ω–æ:`);
    console.log(`   –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${materials.length}`);
    console.log(`   –í–∏–¥—ã —Ä–∞–±–æ—Ç: ${workTypes.length}`);
    console.log(`   –ü–æ–¥–≥—Ä—É–ø–ø—ã: ${subgroups.length}`);
    console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories.length}`);

    if (materials.length > 0) {
      console.log(`\nüí∞ –ü—Ä–∏–º–µ—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:`);
      materials.slice(0, 5).forEach(m => {
        console.log(`   ${m.name}: ${m.price}‚ÇΩ/${m.unit}`);
      });
    }

    if (workTypes.length > 0) {
      console.log(`\n‚öôÔ∏è –ü—Ä–∏–º–µ—Ä—ã –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç:`);
      workTypes.slice(0, 3).forEach(w => {
        console.log(`   ${w.name}: ${w.hourlyRate}‚ÇΩ/—á–∞—Å`);
      });
    }

    if (subgroups.length > 0) {
      console.log(`\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã:`);
      subgroups.forEach(sg => {
        console.log(`   ${sg.name}`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testProductCreation();

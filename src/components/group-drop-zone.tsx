'use client';

import React, { useState, ReactNode } from 'react';
import { useToast } from '@/components/ui/use-toast';

interface GroupDropZoneProps {
  children: ReactNode;
  groupId: string;
  subgroupId?: string;
  onProductsMoved?: () => void;
  className?: string;
  disabled?: boolean;
  groups?: any[]; // –î–ª—è –ø–æ–∏—Å–∫–∞ groupId –ø–æ–¥–≥—Ä—É–ø–ø—ã
  isDragActive?: boolean;
}

export function GroupDropZone({ 
  children, 
  groupId, 
  subgroupId,
  onProductsMoved, 
  className = "",
  disabled = false,
  groups = [],
  isDragActive = false
}: GroupDropZoneProps) {
  const [isDragOver, setIsDragOver] = useState(false);
  const { toast } = useToast();

  const handleDragOver = (e: React.DragEvent) => {
    if (disabled) return;
    
    e.preventDefault();
    e.stopPropagation();
    e.dataTransfer.dropEffect = 'move';
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    if (disabled) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ —ç–ª–µ–º–µ–Ω—Ç
    const rect = e.currentTarget.getBoundingClientRect();
    const x = e.clientX;
    const y = e.clientY;
    
    if (x < rect.left || x > rect.right || y < rect.top || y > rect.bottom) {
      setIsDragOver(false);
    }
  };

  const handleDrop = async (e: React.DragEvent) => {
    if (disabled) return;
    
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(false);

    try {
      const data = e.dataTransfer.getData('application/json');
      if (!data) return;
      
      const productIds: string[] = JSON.parse(data);
      
      if (!productIds || productIds.length === 0) {
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É –∏ –ø–æ–¥–≥—Ä—É–ø–ø—É
      let targetGroupId = groupId;
      let targetSubgroupId = subgroupId || null;

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–≥—Ä—É–ø–ø–∞ –±–µ–∑ groupId, –Ω–∞–π–¥–µ–º –µ—ë —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –≥—Ä—É–ø–ø—É
      if (subgroupId && !groupId) {
        const parentGroup = groups.find(g => 
          g.subgroups?.some((sg: any) => sg.id === subgroupId)
        );
        if (parentGroup) {
          targetGroupId = parentGroup.id;
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
      const response = await fetch('/api/products/bulk-update', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          productIds,
          groupId: targetGroupId,
          subgroupId: targetSubgroupId
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to move products');
      }

      const targetName = subgroupId 
        ? `–ø–æ–¥–≥—Ä—É–ø–ø—É "${groups.flatMap(g => g.subgroups || []).find((sg: any) => sg.id === subgroupId)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}"`
        : `–≥—Ä—É–ø–ø—É "${groups.find(g => g.id === groupId)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}"`;

      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: `${productIds.length} —Ç–æ–≤–∞—Ä–æ–≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ ${targetName}`
      });

      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      onProductsMoved?.();

    } catch (error) {
      console.error('Error moving products:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä—ã",
        variant: "destructive"
      });
    }
  };

  return (
    <div
      className={`relative ${className} ${
        isDragOver && !disabled 
          ? 'bg-blue-50 border-blue-300 ring-2 ring-blue-300 ring-opacity-50' 
          : isDragActive && !disabled
          ? 'bg-blue-50/30 border-blue-200 transition-colors duration-200'
          : ''
      } ${disabled ? 'opacity-50 cursor-not-allowed' : ''} transition-all duration-150`}
      onDragOver={handleDragOver}
      onDragLeave={handleDragLeave}
      onDrop={handleDrop}
    >
      {children}
      {isDragOver && !disabled && (
        <div className="absolute inset-0 bg-blue-500/10 border-2 border-blue-400 border-dashed rounded pointer-events-none flex items-center justify-center z-10">
          <span className="text-blue-600 font-medium text-sm bg-blue-50 px-3 py-1 rounded-md shadow-sm border border-blue-200">
            üì¶ –û—Ç–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
          </span>
        </div>
      )}
    </div>
  );
}

'use client'

import { useState } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Calendar, MapPin, Building, Calculator } from "lucide-react"

interface AddRentItemDialogProps {
  isOpen: boolean
  onClose: () => void
  onAdd: (data: {
    name: string
    rentType: 'office' | 'warehouse' | 'equipment' | 'vehicle' | 'land'
    amount: number
    frequency: 'monthly' | 'quarterly' | 'annually'
    startDate: string
    endDate?: string
    area?: number
    location?: string
    description?: string
  }) => Promise<void>
}

const rentTypes = [
  { value: 'office', label: '–û—Ñ–∏—Å–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ', icon: Building, description: '–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞, –∫–∞–±–∏–Ω–µ—Ç–æ–≤' },
  { value: 'warehouse', label: '–°–∫–ª–∞–¥/–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', icon: Building, description: '–°–∫–ª–∞–¥—Å–∫–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è' },
  { value: 'equipment', label: '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', icon: Calculator, description: '–ê—Ä–µ–Ω–¥–∞ —Å—Ç–∞–Ω–∫–æ–≤, —Ç–µ—Ö–Ω–∏–∫–∏' },
  { value: 'vehicle', label: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', icon: MapPin, description: '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏, —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞' },
  { value: 'land', label: '–ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫', icon: MapPin, description: '–ó–µ–º–ª—è –¥–ª—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' }
]

const frequencies = [
  { 
    value: 'monthly', 
    label: '–ï–∂–µ–º–µ—Å—è—á–Ω–æ', 
    multiplier: 1,
    description: '–ü–ª–∞—Ç–µ–∂ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü'
  },
  { 
    value: 'quarterly', 
    label: '–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ', 
    multiplier: 3,
    description: '–ü–ª–∞—Ç–µ–∂ –∫–∞–∂–¥—ã–µ 3 –º–µ—Å—è—Ü–∞'
  },
  { 
    value: 'annually', 
    label: '–ï–∂–µ–≥–æ–¥–Ω–æ', 
    multiplier: 12,
    description: '–ü–ª–∞—Ç–µ–∂ —Ä–∞–∑ –≤ –≥–æ–¥'
  }
]

const commonRentItems = [
  { name: '–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞', rentType: 'office', amount: 150000, frequency: 'monthly', area: 100 },
  { name: '–ê—Ä–µ–Ω–¥–∞ —Å–∫–ª–∞–¥–∞', rentType: 'warehouse', amount: 80000, frequency: 'monthly', area: 500 },
  { name: '–ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', rentType: 'vehicle', amount: 25000, frequency: 'monthly' },
  { name: '–õ–∏–∑–∏–Ω–≥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', rentType: 'equipment', amount: 50000, frequency: 'monthly' }
]

export function AddRentItemDialog({ isOpen, onClose, onAdd }: AddRentItemDialogProps) {
  const [formData, setFormData] = useState({
    name: '',
    rentType: 'office' as 'office' | 'warehouse' | 'equipment' | 'vehicle' | 'land',
    amount: '',
    frequency: 'monthly' as 'monthly' | 'quarterly' | 'annually',
    startDate: new Date().toISOString().split('T')[0],
    endDate: '',
    area: '',
    location: '',
    description: ''
  })
  const [isSubmitting, setIsSubmitting] = useState(false)

  const handlePresetSelect = (preset: typeof commonRentItems[0]) => {
    setFormData({
      name: preset.name,
      rentType: preset.rentType as any,
      amount: preset.amount.toString(),
      frequency: preset.frequency as any,
      startDate: new Date().toISOString().split('T')[0],
      endDate: '',
      area: preset.area?.toString() || '',
      location: '',
      description: ''
    })
  }

  const calculateMonthlyAmount = () => {
    if (!formData.amount) return 0
    const amount = parseFloat(formData.amount)
    const frequency = frequencies.find(f => f.value === formData.frequency)
    if (!frequency) return 0
    
    return amount / frequency.multiplier
  }

  const calculateAnnualAmount = () => {
    return calculateMonthlyAmount() * 12
  }

  const getContractEndDate = () => {
    if (!formData.startDate) return null
    const startDate = new Date(formData.startDate)
    const endDate = new Date(startDate)
    endDate.setFullYear(endDate.getFullYear() + 1) // –û–±—ã—á–Ω–æ –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –≥–æ–¥
    return endDate.toISOString().split('T')[0]
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    
    try {
      await onAdd({
        name: formData.name,
        rentType: formData.rentType,
        amount: parseFloat(formData.amount),
        frequency: formData.frequency,
        startDate: formData.startDate,
        endDate: formData.endDate || getContractEndDate() || undefined,
        area: formData.area ? parseFloat(formData.area) : undefined,
        location: formData.location || undefined,
        description: formData.description || undefined
      })
      
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFormData({
        name: '',
        rentType: 'office',
        amount: '',
        frequency: 'monthly',
        startDate: new Date().toISOString().split('T')[0],
        endDate: '',
        area: '',
        location: '',
        description: ''
      })
      onClose()
    } catch (error) {
      console.error('Error adding rent item:', error)
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            üè¢ –î–æ–±–∞–≤–∏—Ç—å –∞—Ä–µ–Ω–¥—É
          </DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä */}
          <div>
            <Label className="text-sm font-medium">–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä</Label>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-2 mt-2">
              {commonRentItems.map((preset, index) => (
                <Button
                  key={index}
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => handlePresetSelect(preset)}
                  className="h-auto p-3 text-left justify-start"
                >
                  <div className="w-full">
                    <div className="font-medium text-xs">{preset.name}</div>
                    <div className="text-xs text-gray-500">
                      {preset.amount.toLocaleString('ru-RU')} ‚ÇΩ/–º–µ—Å
                    </div>
                    {preset.area && (
                      <Badge variant="outline" className="text-xs mt-1">
                        {preset.area} –º¬≤
                      </Badge>
                    )}
                  </div>
                </Button>
              ))}
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
            <div className="space-y-4">
              <div>
                <Label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ *</Label>
                <Input
                  id="name"
                  value={formData.name}
                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞ –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π"
                  required
                />
              </div>

              <div>
                <Label>–¢–∏–ø –∞—Ä–µ–Ω–¥—ã *</Label>
                <Select 
                  value={formData.rentType} 
                  onValueChange={(value: 'office' | 'warehouse' | 'equipment' | 'vehicle' | 'land') => 
                    setFormData(prev => ({ ...prev, rentType: value }))
                  }
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {rentTypes.map((type) => {
                      const Icon = type.icon
                      return (
                        <SelectItem key={type.value} value={type.value}>
                          <div className="flex items-center gap-2">
                            <Icon className="w-4 h-4" />
                            <div>
                              <div className="font-medium">{type.label}</div>
                              <div className="text-xs text-gray-500">{type.description}</div>
                            </div>
                          </div>
                        </SelectItem>
                      )
                    })}
                  </SelectContent>
                </Select>
              </div>

              <div className="grid grid-cols-2 gap-3">
                <div>
                  <Label htmlFor="amount">–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ (‚ÇΩ) *</Label>
                  <Input
                    id="amount"
                    type="number"
                    min="0"
                    step="0.01"
                    value={formData.amount}
                    onChange={(e) => setFormData(prev => ({ ...prev, amount: e.target.value }))}
                    placeholder="150000"
                    required
                  />
                </div>

                <div>
                  <Label>–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å *</Label>
                  <Select 
                    value={formData.frequency} 
                    onValueChange={(value: 'monthly' | 'quarterly' | 'annually') => 
                      setFormData(prev => ({ ...prev, frequency: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {frequencies.map((freq) => (
                        <SelectItem key={freq.value} value={freq.value}>
                          <div>
                            <div className="font-medium">{freq.label}</div>
                            <div className="text-xs text-gray-500">{freq.description}</div>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-3">
                <div>
                  <Label htmlFor="startDate">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ *</Label>
                  <Input
                    id="startDate"
                    type="date"
                    value={formData.startDate}
                    onChange={(e) => setFormData(prev => ({ ...prev, startDate: e.target.value }))}
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="endDate">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</Label>
                  <Input
                    id="endDate"
                    type="date"
                    value={formData.endDate}
                    onChange={(e) => setFormData(prev => ({ ...prev, endDate: e.target.value }))}
                    placeholder={getContractEndDate() || ''}
                  />
                </div>
              </div>

              {(formData.rentType === 'office' || formData.rentType === 'warehouse') && (
                <div>
                  <Label htmlFor="area">–ü–ª–æ—â–∞–¥—å (–º¬≤)</Label>
                  <Input
                    id="area"
                    type="number"
                    min="0"
                    step="0.1"
                    value={formData.area}
                    onChange={(e) => setFormData(prev => ({ ...prev, area: e.target.value }))}
                    placeholder="100"
                  />
                </div>
              )}

              <div>
                <Label htmlFor="location">–ê–¥—Ä–µ—Å/–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</Label>
                <Input
                  id="location"
                  value={formData.location}
                  onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
                  placeholder="–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥.1"
                />
              </div>

              <div>
                <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                />
              </div>
            </div>

            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ä–∞—Å—á–µ—Ç—ã */}
            <div>
              <Label className="text-sm font-medium">–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</Label>
              <Card className="mt-2">
                <CardContent className="pt-4 space-y-4">
                  {formData.amount && (
                    <>
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-600">–ü–ª–∞—Ç–µ–∂:</span>
                          <span className="font-medium">
                            {parseFloat(formData.amount).toLocaleString('ru-RU')} ‚ÇΩ 
                            /{formData.frequency === 'monthly' ? '–º–µ—Å' : formData.frequency === 'quarterly' ? '–∫–≤' : '–≥–æ–¥'}
                          </span>
                        </div>

                        {formData.frequency !== 'monthly' && (
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-600">–í –º–µ—Å—è—Ü:</span>
                            <span className="font-medium">
                              {calculateMonthlyAmount().toLocaleString('ru-RU')} ‚ÇΩ
                            </span>
                          </div>
                        )}

                        <div className="flex justify-between text-sm border-t pt-2">
                          <span className="text-gray-600">–í –≥–æ–¥:</span>
                          <span className="font-bold text-lg">
                            {calculateAnnualAmount().toLocaleString('ru-RU')} ‚ÇΩ
                          </span>
                        </div>
                      </div>

                      {formData.area && (formData.rentType === 'office' || formData.rentType === 'warehouse') && (
                        <div className="border-t pt-3 space-y-1">
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-600">–ü–ª–æ—â–∞–¥—å:</span>
                            <span className="font-medium">{formData.area} –º¬≤</span>
                          </div>
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-600">‚ÇΩ –∑–∞ –º¬≤/–º–µ—Å:</span>
                            <span className="font-medium">
                              {(calculateMonthlyAmount() / parseFloat(formData.area)).toLocaleString('ru-RU')} ‚ÇΩ
                            </span>
                          </div>
                        </div>
                      )}
                    </>
                  )}

                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
                  <div className="bg-blue-50 p-3 rounded-lg text-xs text-blue-800">
                    <div className="flex items-start gap-2">
                      <Calendar className="w-3 h-3 mt-0.5 flex-shrink-0" />
                      <div>
                        <p className="font-medium mb-1">–ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π:</p>
                        <ul className="space-y-0.5 ml-2">
                          <li>‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω–æ: 12 –ø–ª–∞—Ç–µ–∂–µ–π –≤ –≥–æ–¥</li>
                          <li>‚Ä¢ –ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ: 4 –ø–ª–∞—Ç–µ–∂–∞ –≤ –≥–æ–¥</li>
                          <li>‚Ä¢ –ï–∂–µ–≥–æ–¥–Ω–æ: 1 –ø–ª–∞—Ç–µ–∂ –≤ –≥–æ–¥</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã */}
                  <div className="bg-yellow-50 p-3 rounded-lg text-xs text-yellow-800">
                    <p className="font-medium mb-1">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—á–µ—Å—Ç—å:</p>
                    <ul className="space-y-0.5 ml-2">
                      <li>‚Ä¢ –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏</li>
                      <li>‚Ä¢ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ —É–±–æ—Ä–∫–∞</li>
                      <li>‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞</li>
                      <li>‚Ä¢ –ù–∞–ª–æ–≥ –Ω–∞ –∏–º—É—â–µ—Å—Ç–≤–æ</li>
                    </ul>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>

          <div className="flex justify-end space-x-3 pt-4 border-t">
            <Button type="button" variant="outline" onClick={onClose}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å –∞—Ä–µ–Ω–¥—É'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  )
}

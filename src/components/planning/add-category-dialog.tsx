'use client'

import { useState } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Plus, X } from "lucide-react"

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —ç–º–æ–¥–∑–∏
const categoryTypes = [
  { value: 'salary', label: '–ó–∞—Ä–ø–ª–∞—Ç–∞', emoji: 'üí∞' },
  { value: 'benefits', label: '–õ—å–≥–æ—Ç—ã', emoji: 'üéÅ' },
  { value: 'taxes', label: '–ù–∞–ª–æ–≥–∏', emoji: 'üìä' },
  { value: 'deductions', label: '–£–¥–µ—Ä–∂–∞–Ω–∏—è', emoji: 'üìâ' },
  { value: 'bonus', label: '–ü—Ä–µ–º–∏–∏', emoji: 'üèÜ' },
  { value: 'marketing', label: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', emoji: 'üì¢' },
  { value: 'operations', label: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', emoji: '‚öôÔ∏è' },
  { value: 'rent', label: '–ê—Ä–µ–Ω–¥–∞', emoji: 'üè¢' },
  { value: 'utilities', label: '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', emoji: 'üí°' },
  { value: 'travel', label: '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏', emoji: '‚úàÔ∏è' },
  { value: 'training', label: '–û–±—É—á–µ–Ω–∏–µ', emoji: 'üìö' },
  { value: 'equipment', label: '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', emoji: 'üñ•Ô∏è' },
  { value: 'software', label: '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ', emoji: 'üíª' },
  { value: 'insurance', label: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', emoji: 'üõ°Ô∏è' },
  { value: 'legal', label: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏', emoji: '‚öñÔ∏è' },
  { value: 'consulting', label: '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥', emoji: 'ü§ù' },
  { value: 'materials', label: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', emoji: 'üì¶' },
  { value: 'transport', label: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', emoji: 'üöó' },
  { value: 'food', label: '–ü–∏—Ç–∞–Ω–∏–µ', emoji: 'üçΩÔ∏è' },
  { value: 'other', label: '–ü—Ä–æ—á–µ–µ', emoji: 'üîß' }
]

interface AddCategoryDialogProps {
  fundId: string
  isOpen: boolean
  onClose: () => void
  onAdd: (fundId: string, data: {
    name: string
    categoryType: string
    plannedAmount: number
    description: string
  }) => Promise<void>
}

export function AddCategoryDialog({ fundId, isOpen, onClose, onAdd }: AddCategoryDialogProps) {
  const [formData, setFormData] = useState({
    name: '',
    categoryType: '',
    plannedAmount: 0,
    description: ''
  })
  const [isLoading, setIsLoading] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    console.log('üéØ Form submitted with data:', formData)
    
    if (!formData.name.trim() || !formData.categoryType) {
      console.log('‚ùå Validation failed - name or categoryType missing')
      return
    }
    
    setIsLoading(true)
    
    try {
      console.log('üìû Calling onAdd function with:', { fundId, formData })
      await onAdd(fundId, formData)
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
      setFormData({
        name: '',
        categoryType: '',
        plannedAmount: 0,
        description: ''
      })
      onClose()
    } catch (error) {
      console.error('Error adding category:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const handleClose = () => {
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    setFormData({
      name: '',
      categoryType: '',
      plannedAmount: 0,
      description: ''
    })
    onClose()
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Plus className="h-5 w-5" />
            –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
          </DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</Label>
            <Input
              id="name"
              value={formData.name}
              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
              required
            />
          </div>

          <div>
            <Label htmlFor="categoryType">–¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</Label>
            <Select 
              value={formData.categoryType} 
              onValueChange={(value) => setFormData(prev => ({ ...prev, categoryType: value }))}
            >
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" />
              </SelectTrigger>
              <SelectContent>
                {categoryTypes.map((type) => (
                  <SelectItem key={type.value} value={type.value}>
                    <span className="flex items-center gap-2">
                      <span>{type.emoji}</span>
                      <span>{type.label}</span>
                    </span>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label htmlFor="plannedAmount">–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è —Å—É–º–º–∞ (‚ÇΩ)</Label>
            <Input
              id="plannedAmount"
              type="number"
              step="0.01"
              min="0"
              value={formData.plannedAmount}
              onChange={(e) => setFormData(prev => ({ ...prev, plannedAmount: parseFloat(e.target.value) || 0 }))}
              placeholder="0.00"
              required
            />
          </div>

          <div>
            <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
            <Textarea
              id="description"
              value={formData.description}
              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
              rows={3}
            />
          </div>

          <div className="flex justify-end gap-2 pt-4">
            <Button type="button" variant="outline" onClick={handleClose}>
              <X className="mr-2 h-4 w-4" />
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button type="submit" disabled={isLoading || !formData.name || !formData.categoryType}>
              <Plus className="mr-2 h-4 w-4" />
              –î–æ–±–∞–≤–∏—Ç—å
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  )
}

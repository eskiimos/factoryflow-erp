import { prisma } from '@/lib/prisma'
import { NextRequest, NextResponse } from 'next/server'
import { templateGenerator } from '@/lib/template-generator'

// POST /api/constructor/generate-template - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω –∏–∑ –±–ª–æ–∫–æ–≤
export async function POST(request: NextRequest) {
  try {
    const data = await request.json()
    
    const { blocks, metadata } = data

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!blocks || !Array.isArray(blocks) || blocks.length === 0) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±–ª–æ–∫' 
        },
        { status: 400 }
      )
    }

    if (!metadata?.name) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞' 
        },
        { status: 400 }
      )
    }

    console.log('üèóÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –∏–∑ –±–ª–æ–∫–æ–≤:', {
      blocksCount: blocks.length,
      metadata
    })

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∞—Ö –∏–∑ –ë–î
    const blockIds = blocks.map((b: any) => b.blockId)
    const dbBlocks = await prisma.productBlock.findMany({
      where: {
        id: { in: blockIds },
        isActive: true
      }
    })

    if (dbBlocks.length !== blockIds.length) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã' 
        },
        { status: 400 }
      )
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    const selectedBlocks = blocks.map((blockData: any) => {
      const dbBlock = dbBlocks.find(db => db.id === blockData.blockId)!
      return {
        blockId: blockData.blockId,
        block: {
          ...dbBlock,
          config: JSON.parse(dbBlock.config)
        },
        position: blockData.position || 0,
        customConfig: blockData.customConfig,
        isEnabled: blockData.isEnabled !== false
      }
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
    const result = await templateGenerator.generateFromBlocks(selectedBlocks, metadata)

    if (!result.validation.isValid) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤',
          validation: result.validation
        },
        { status: 400 }
      )
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ—á–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
    await prisma.productTemplateFromBlocks.create({
      data: {
        name: metadata.name,
        description: metadata.description,
        blocks: JSON.stringify(blocks),
        generatedTemplateId: result.templateId
      }
    })

    return NextResponse.json({
      success: true,
      data: result
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω' 
      },
      { status: 500 }
    )
  }
}

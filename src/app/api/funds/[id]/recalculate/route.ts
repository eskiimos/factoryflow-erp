import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

// POST /api/funds/[id]/recalculate - –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ —Å—É–º–º—ã –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Ñ–æ–Ω–¥–∞
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: fundId } = await params

    console.log(`üîÑ Recalculating fund ${fundId}...`)

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–Ω–¥
    const fund = await prisma.fund.findUnique({
      where: { id: fundId },
      include: {
        categories: {
          where: { isActive: true },
          include: { items: true }
        }
      }
    })

    if (!fund) {
      return NextResponse.json(
        { error: '–§–æ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    // 1. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let totalPlannedAmount = 0
    
    for (const category of fund.categories) {
      let categoryPercentage: number
      
      if (category.categoryType === 'taxes') {
        // –î–ª—è –Ω–∞–ª–æ–≥–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: –ø—Ä–æ—Ü–µ–Ω—Ç = —Å—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        categoryPercentage = parseFloat(
          category.items.reduce((sum, item) => sum + (item.percentage || 0), 0).toFixed(2)
        )
        console.log(`üìä Tax category "${category.name}": ${categoryPercentage}% (from items)`)
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—É–º–º—ã
        categoryPercentage = 0 // –≤—Ä–µ–º–µ–Ω–Ω–æ
      }

      totalPlannedAmount += category.plannedAmount
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ø–æ–∫–∞ –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–ª—è –Ω–µ-–Ω–∞–ª–æ–≥–æ–≤—ã—Ö)
      if (category.categoryType === 'taxes') {
        await prisma.fundCategory.update({
          where: { id: category.id },
          data: { percentage: categoryPercentage }
        })
      }
    }

    // 2. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –Ω–µ-–Ω–∞–ª–æ–≥–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (totalPlannedAmount > 0) {
      for (const category of fund.categories) {
        if (category.categoryType !== 'taxes') {
          const categoryPercentage = parseFloat(
            ((category.plannedAmount / totalPlannedAmount) * 100).toFixed(2)
          )
          
          await prisma.fundCategory.update({
            where: { id: category.id },
            data: { percentage: categoryPercentage }
          })
          
          console.log(`üí∞ Category "${category.name}": ${categoryPercentage}% (${category.plannedAmount}/${totalPlannedAmount})`)
        }
      }
    }

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—ã —Ñ–æ–Ω–¥–∞
    const allocatedAmount = totalPlannedAmount
    const remainingAmount = fund.totalAmount - allocatedAmount

    await prisma.fund.update({
      where: { id: fundId },
      data: {
        allocatedAmount: allocatedAmount,
        remainingAmount: remainingAmount
      }
    })

    console.log(`‚úÖ Fund recalculated:
      - Total: ${fund.totalAmount}
      - Allocated: ${allocatedAmount} 
      - Remaining: ${remainingAmount}
      - Categories: ${fund.categories.length}`)

    return NextResponse.json({
      success: true,
      message: '–ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
      data: {
        totalAmount: fund.totalAmount,
        allocatedAmount: allocatedAmount,
        remainingAmount: remainingAmount,
        categoriesCount: fund.categories.length
      }
    })

  } catch (error) {
    console.error('‚ùå Error recalculating fund:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Ñ–æ–Ω–¥–∞' },
      { status: 500 }
    )
  }
}

import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: fundId } = await params
    const data = await request.json()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–¥–∞
    const fund = await prisma.fund.findUnique({
      where: { id: fundId }
    })

    if (!fund) {
      return NextResponse.json(
        { error: '–§–æ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const getEmojiByType = (categoryType: string) => {
      const emojiMap: { [key: string]: string } = {
        'salary': 'üí∞',
        'benefits': 'üéÅ',
        'taxes': 'üìä',
        'deductions': 'üìâ',
        'bonus': 'üèÜ',
        'marketing': 'üì¢',
        'operations': '‚öôÔ∏è',
        'rent': 'üè¢',
        'utilities': 'üí°',
        'travel': '‚úàÔ∏è',
        'training': 'üìö',
        'equipment': 'üñ•Ô∏è',
        'software': 'üíª',
        'insurance': 'üõ°Ô∏è',
        'legal': '‚öñÔ∏è',
        'consulting': 'ü§ù',
        'materials': 'üì¶',
        'transport': 'üöó',
        'food': 'üçΩÔ∏è',
        'other': 'üîß'
      }
      return emojiMap[categoryType] || 'üîß'
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const category = await prisma.fundCategory.create({
      data: {
        fundId: fundId,
        name: data.name,
        categoryType: data.categoryType,
        plannedAmount: data.plannedAmount,
        actualAmount: 0, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—É–º–º–∞ —Ä–∞–≤–Ω–∞ 0
        percentage: 0, // –ü—Ä–æ—Ü–µ–Ω—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω
        description: data.description || '',
        priority: data.priority || 2, // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        emoji: getEmojiByType(data.categoryType),
        isActive: true,
      }
    })

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ñ–æ–Ω–¥–∞
    const allCategories = await prisma.fundCategory.findMany({
      where: { 
        fundId: fundId,
        isActive: true 
      },
      include: {
        items: true
      }
    })

    const totalPlanned = allCategories.reduce((sum, cat) => sum + cat.plannedAmount, 0)

    if (totalPlanned > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      for (const cat of allCategories) {
        let percentage: number
        
        if (cat.categoryType === 'taxes') {
          // –î–ª—è –Ω–∞–ª–æ–≥–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç = —Å—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          percentage = parseFloat(cat.items.reduce((sum, item) => sum + (item.percentage || 0), 0).toFixed(2))
          console.log(`Tax category ${cat.name}: calculated percentage from items = ${percentage}%`)
        } else {
          // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç = –¥–æ–ª—è –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
          percentage = parseFloat(((cat.plannedAmount / totalPlanned) * 100).toFixed(2))
        }
        
        await prisma.fundCategory.update({
          where: { id: cat.id },
          data: { percentage }
        })
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ñ–æ–Ω–¥–∞
    await prisma.fund.update({
      where: { id: fundId },
      data: {
        allocatedAmount: totalPlanned,
        remainingAmount: fund.totalAmount - totalPlanned,
      }
    })

    return NextResponse.json({
      success: true,
      category: {
        ...category,
        percentage: category.categoryType === 'taxes' ? 0 : (totalPlanned > 0 ? parseFloat(((category.plannedAmount / totalPlanned) * 100).toFixed(2)) : 0)
      }
    })

  } catch (error) {
    console.error('Error creating category:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' },
      { status: 500 }
    )
  }
}
